import type {
	Action,
	AssetType,
	Checksum256Type,
	NameType,
	UInt16Type,
	UInt64Type
} from '@wharfkit/antelope';
import {
	ABI,
	Asset,
	Blob,
	Checksum256,
	Float64,
	Int64,
	Name,
	Struct,
	TimePoint,
	UInt16,
	UInt32,
	UInt64
} from '@wharfkit/antelope';
import type { ActionOptions, ContractArgs, PartialBy, Table } from '@wharfkit/contract';
import { Contract as BaseContract } from '@wharfkit/contract';
export const abiBlob = Blob.from(
	''
);
export const abi = ABI.from(abiBlob);
export namespace Types {
	@Struct.type('abusers')
	export class abusers extends Struct {
		@Struct.field(Name)
		declare name: Name;
		@Struct.field(UInt64)
		declare votes: UInt64;
	}
	@Struct.type('addcustodian')
	export class addcustodian extends Struct {
		@Struct.field(Name)
		declare name: Name;
	}
	@Struct.type('bars')
	export class bars extends Struct {
		@Struct.field(UInt64)
		declare id: UInt64;
		@Struct.field(UInt64)
		declare high: UInt64;
		@Struct.field(UInt64)
		declare low: UInt64;
		@Struct.field(UInt64)
		declare median: UInt64;
		@Struct.field(TimePoint)
		declare timestamp: TimePoint;
	}
	@Struct.type('cancelbounty')
	export class cancelbounty extends Struct {
		@Struct.field(Name)
		declare name: Name;
		@Struct.field('string')
		declare reason: string;
	}
	@Struct.type('claim')
	export class claim extends Struct {
		@Struct.field(Name)
		declare owner: Name;
	}
	@Struct.type('clear')
	export class clear extends Struct {
		@Struct.field(Name)
		declare pair: Name;
	}
	@Struct.type('globalinput')
	export class globalinput extends Struct {
		@Struct.field(UInt64)
		declare datapoints_per_instrument: UInt64;
		@Struct.field(UInt64)
		declare bars_per_instrument: UInt64;
		@Struct.field(UInt64)
		declare vote_interval: UInt64;
		@Struct.field(UInt64)
		declare write_cooldown: UInt64;
		@Struct.field(UInt64)
		declare approver_threshold: UInt64;
		@Struct.field(UInt64)
		declare approving_oracles_threshold: UInt64;
		@Struct.field(UInt64)
		declare approving_custodians_threshold: UInt64;
		@Struct.field(UInt64)
		declare minimum_rank: UInt64;
		@Struct.field(UInt64)
		declare paid: UInt64;
		@Struct.field(UInt64)
		declare min_bounty_delay: UInt64;
		@Struct.field(UInt64)
		declare new_bounty_delay: UInt64;
	}
	@Struct.type('configure')
	export class configure extends Struct {
		@Struct.field(globalinput)
		declare g: globalinput;
	}
	@Struct.type('custodians')
	export class custodians extends Struct {
		@Struct.field(Name)
		declare name: Name;
	}
	@Struct.type('datapoints')
	export class datapoints extends Struct {
		@Struct.field(UInt64)
		declare id: UInt64;
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(UInt64)
		declare value: UInt64;
		@Struct.field(UInt64)
		declare median: UInt64;
		@Struct.field(TimePoint)
		declare timestamp: TimePoint;
	}
	@Struct.type('delcustodian')
	export class delcustodian extends Struct {
		@Struct.field(Name)
		declare name: Name;
	}
	@Struct.type('deletepair')
	export class deletepair extends Struct {
		@Struct.field(Name)
		declare name: Name;
		@Struct.field('string')
		declare reason: string;
	}
	@Struct.type('donations')
	export class donations extends Struct {
		@Struct.field(UInt64)
		declare id: UInt64;
		@Struct.field(Name)
		declare donator: Name;
		@Struct.field(Name)
		declare pair: Name;
		@Struct.field(TimePoint)
		declare timestamp: TimePoint;
		@Struct.field(Asset)
		declare amount: Asset;
	}
	@Struct.type('pairinput')
	export class pairinput extends Struct {
		@Struct.field(Name)
		declare name: Name;
		@Struct.field(Asset.Symbol)
		declare base_symbol: Asset.Symbol;
		@Struct.field(UInt16)
		declare base_type: UInt16;
		@Struct.field(Name)
		declare base_contract: Name;
		@Struct.field(Asset.Symbol)
		declare quote_symbol: Asset.Symbol;
		@Struct.field(UInt16)
		declare quote_type: UInt16;
		@Struct.field(Name)
		declare quote_contract: Name;
		@Struct.field(UInt64)
		declare quoted_precision: UInt64;
	}
	@Struct.type('editbounty')
	export class editbounty extends Struct {
		@Struct.field(Name)
		declare name: Name;
		@Struct.field(pairinput)
		declare pair: pairinput;
	}
	@Struct.type('pairs')
	export class pairs extends Struct {
		@Struct.field('bool')
		declare active: boolean;
		@Struct.field('bool')
		declare bounty_awarded: boolean;
		@Struct.field('bool')
		declare bounty_edited_by_custodians: boolean;
		@Struct.field(Name)
		declare proposer: Name;
		@Struct.field(Name)
		declare name: Name;
		@Struct.field(Asset)
		declare bounty_amount: Asset;
		@Struct.field(Name, { array: true })
		declare approving_custodians: Name[];
		@Struct.field(Name, { array: true })
		declare approving_oracles: Name[];
		@Struct.field(Asset.Symbol)
		declare base_symbol: Asset.Symbol;
		@Struct.field(UInt16)
		declare base_type: UInt16;
		@Struct.field(Name)
		declare base_contract: Name;
		@Struct.field(Asset.Symbol)
		declare quote_symbol: Asset.Symbol;
		@Struct.field(UInt16)
		declare quote_type: UInt16;
		@Struct.field(Name)
		declare quote_contract: Name;
		@Struct.field(UInt64)
		declare quoted_precision: UInt64;
	}
	@Struct.type('editpair')
	export class editpair extends Struct {
		@Struct.field(pairs)
		declare pair: pairs;
	}
	@Struct.type('forfeithash')
	export class forfeithash extends Struct {
		@Struct.field(Name)
		declare owner: Name;
	}
	@Struct.type('global')
	export class global extends Struct {
		@Struct.field(UInt64)
		declare id: UInt64;
		@Struct.field(UInt64)
		declare total_datapoints_count: UInt64;
		@Struct.field(Asset)
		declare total_claimed: Asset;
		@Struct.field(UInt64)
		declare datapoints_per_instrument: UInt64;
		@Struct.field(UInt64)
		declare bars_per_instrument: UInt64;
		@Struct.field(UInt64)
		declare vote_interval: UInt64;
		@Struct.field(UInt64)
		declare write_cooldown: UInt64;
		@Struct.field(UInt64)
		declare approver_threshold: UInt64;
		@Struct.field(UInt64)
		declare approving_oracles_threshold: UInt64;
		@Struct.field(UInt64)
		declare approving_custodians_threshold: UInt64;
		@Struct.field(UInt64)
		declare minimum_rank: UInt64;
		@Struct.field(UInt64)
		declare paid: UInt64;
		@Struct.field(UInt64)
		declare min_bounty_delay: UInt64;
		@Struct.field(UInt64)
		declare new_bounty_delay: UInt64;
	}
	@Struct.type('hashes')
	export class hashes extends Struct {
		@Struct.field(UInt64)
		declare id: UInt64;
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(Checksum256)
		declare multiparty: Checksum256;
		@Struct.field(Checksum256)
		declare hash: Checksum256;
		@Struct.field('string')
		declare reveal: string;
		@Struct.field(TimePoint)
		declare timestamp: TimePoint;
	}
	@Struct.type('migratedata')
	export class migratedata extends Struct {}
	@Struct.type('networks')
	export class networks extends Struct {
		@Struct.field(Name)
		declare name: Name;
	}
	@Struct.type('newbounty')
	export class newbounty extends Struct {
		@Struct.field(Name)
		declare proposer: Name;
		@Struct.field(pairinput)
		declare pair: pairinput;
	}
	@Struct.type('oglobal')
	export class oglobal extends Struct {
		@Struct.field(UInt64)
		declare id: UInt64;
		@Struct.field(UInt64)
		declare total_datapoints_count: UInt64;
	}
	@Struct.type('quote')
	export class quote extends Struct {
		@Struct.field(UInt64)
		declare value: UInt64;
		@Struct.field(Name)
		declare pair: Name;
	}
	@Struct.type('reguser')
	export class reguser extends Struct {
		@Struct.field(Name)
		declare owner: Name;
	}
	@Struct.type('stats')
	export class stats extends Struct {
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(TimePoint)
		declare timestamp: TimePoint;
		@Struct.field(UInt64)
		declare count: UInt64;
		@Struct.field(TimePoint)
		declare last_claim: TimePoint;
		@Struct.field(Asset)
		declare balance: Asset;
	}
	@Struct.type('unvotebounty')
	export class unvotebounty extends Struct {
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(Name)
		declare bounty: Name;
	}
	@Struct.type('updateusers')
	export class updateusers extends Struct {}
	@Struct.type('users')
	export class users extends Struct {
		@Struct.field(Name)
		declare name: Name;
		@Struct.field(Asset)
		declare contribution: Asset;
		@Struct.field(UInt64)
		declare score: UInt64;
		@Struct.field(TimePoint)
		declare creation_timestamp: TimePoint;
	}
	@Struct.type('voteabuser')
	export class voteabuser extends Struct {
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(Name)
		declare abuser: Name;
	}
	@Struct.type('votebounty')
	export class votebounty extends Struct {
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(Name)
		declare bounty: Name;
	}
	@Struct.type('voter_info')
	export class voter_info extends Struct {
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(Name)
		declare proxy: Name;
		@Struct.field(Name, { array: true })
		declare producers: Name[];
		@Struct.field(Int64)
		declare staked: Int64;
		@Struct.field(Float64)
		declare last_vote_weight: Float64;
		@Struct.field(Float64)
		declare proxied_vote_weight: Float64;
		@Struct.field('bool')
		declare is_proxy: boolean;
		@Struct.field(UInt32)
		declare flags1: UInt32;
		@Struct.field(UInt32)
		declare reserved2: UInt32;
		@Struct.field(Asset)
		declare reserved3: Asset;
	}
	@Struct.type('write')
	export class write extends Struct {
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(quote, { array: true })
		declare quotes: quote[];
	}
	@Struct.type('writehash')
	export class writehash extends Struct {
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(Checksum256)
		declare hash: Checksum256;
		@Struct.field('string')
		declare reveal: string;
	}
}
export const TableMap = {
	abusers: Types.abusers,
	bars: Types.bars,
	custodians: Types.custodians,
	datapoints: Types.datapoints,
	donations: Types.donations,
	global: Types.global,
	hashes: Types.hashes,
	networks: Types.networks,
	npairs: Types.pairs,
	oglobal: Types.oglobal,
	pairs: Types.pairs,
	stats: Types.stats,
	users: Types.users,
	voters: Types.voter_info
};
export interface TableTypes {
	abusers: Types.abusers;
	bars: Types.bars;
	custodians: Types.custodians;
	datapoints: Types.datapoints;
	donations: Types.donations;
	global: Types.global;
	hashes: Types.hashes;
	networks: Types.networks;
	npairs: Types.pairs;
	oglobal: Types.oglobal;
	pairs: Types.pairs;
	stats: Types.stats;
	users: Types.users;
	voters: Types.voter_info;
}
export type RowType<T> = T extends keyof TableTypes ? TableTypes[T] : any;
export type TableNames = keyof TableTypes;
export namespace ActionParams {
	export namespace Type {
		export interface globalinput {
			datapoints_per_instrument: UInt64Type;
			bars_per_instrument: UInt64Type;
			vote_interval: UInt64Type;
			write_cooldown: UInt64Type;
			approver_threshold: UInt64Type;
			approving_oracles_threshold: UInt64Type;
			approving_custodians_threshold: UInt64Type;
			minimum_rank: UInt64Type;
			paid: UInt64Type;
			min_bounty_delay: UInt64Type;
			new_bounty_delay: UInt64Type;
		}
		export interface pairinput {
			name: NameType;
			base_symbol: Asset.SymbolType;
			base_type: UInt16Type;
			base_contract: NameType;
			quote_symbol: Asset.SymbolType;
			quote_type: UInt16Type;
			quote_contract: NameType;
			quoted_precision: UInt64Type;
		}
		export interface pairs {
			active: boolean;
			bounty_awarded: boolean;
			bounty_edited_by_custodians: boolean;
			proposer: NameType;
			name: NameType;
			bounty_amount: AssetType;
			approving_custodians: NameType[];
			approving_oracles: NameType[];
			base_symbol: Asset.SymbolType;
			base_type: UInt16Type;
			base_contract: NameType;
			quote_symbol: Asset.SymbolType;
			quote_type: UInt16Type;
			quote_contract: NameType;
			quoted_precision: UInt64Type;
		}
		export interface quote {
			value: UInt64Type;
			pair: NameType;
		}
	}
	export interface addcustodian {
		name: NameType;
	}
	export interface cancelbounty {
		name: NameType;
		reason: string;
	}
	export interface claim {
		owner: NameType;
	}
	export interface clear {
		pair: NameType;
	}
	export interface configure {
		g: Type.globalinput;
	}
	export interface delcustodian {
		name: NameType;
	}
	export interface deletepair {
		name: NameType;
		reason: string;
	}
	export interface editbounty {
		name: NameType;
		pair: Type.pairinput;
	}
	export interface editpair {
		pair: Type.pairs;
	}
	export interface forfeithash {
		owner: NameType;
	}
	export interface migratedata {}
	export interface newbounty {
		proposer: NameType;
		pair: Type.pairinput;
	}
	export interface reguser {
		owner: NameType;
	}
	export interface unvotebounty {
		owner: NameType;
		bounty: NameType;
	}
	export interface updateusers {}
	export interface voteabuser {
		owner: NameType;
		abuser: NameType;
	}
	export interface votebounty {
		owner: NameType;
		bounty: NameType;
	}
	export interface write {
		owner: NameType;
		quotes: Type.quote[];
	}
	export interface writehash {
		owner: NameType;
		hash: Checksum256Type;
		reveal: string;
	}
}
export interface ActionNameParams {
	addcustodian: ActionParams.addcustodian;
	cancelbounty: ActionParams.cancelbounty;
	claim: ActionParams.claim;
	clear: ActionParams.clear;
	configure: ActionParams.configure;
	delcustodian: ActionParams.delcustodian;
	deletepair: ActionParams.deletepair;
	editbounty: ActionParams.editbounty;
	editpair: ActionParams.editpair;
	forfeithash: ActionParams.forfeithash;
	migratedata: ActionParams.migratedata;
	newbounty: ActionParams.newbounty;
	reguser: ActionParams.reguser;
	unvotebounty: ActionParams.unvotebounty;
	updateusers: ActionParams.updateusers;
	voteabuser: ActionParams.voteabuser;
	votebounty: ActionParams.votebounty;
	write: ActionParams.write;
	writehash: ActionParams.writehash;
}
export type ActionNames = keyof ActionNameParams;
export class Contract extends BaseContract {
	constructor(args: PartialBy<ContractArgs, 'abi' | 'account'>) {
		super({
			client: args.client,
			abi: abi,
			account: args.account || Name.from('delphioracle')
		});
	}
	action<T extends ActionNames>(
		name: T,
		data: ActionNameParams[T],
		options?: ActionOptions
	): Action {
		return super.action(name, data, options);
	}
	table<T extends TableNames>(name: T, scope?: NameType): Table<RowType<T>> {
		return super.table(name, scope, TableMap[name]);
	}
}
