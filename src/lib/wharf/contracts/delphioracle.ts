import type {Action, NameType, UInt16Type, UInt32Type, UInt64Type} from '@wharfkit/antelope'
import {
    ABI,
    Asset,
    Blob,
    Checksum256,
    Float64,
    Int64,
    Name,
    Struct,
    TimePoint,
    UInt16,
    UInt32,
    UInt64,
    UInt8,
} from '@wharfkit/antelope'
import type {ActionOptions, ContractArgs, PartialBy, Table} from '@wharfkit/contract'
import {Contract as BaseContract} from '@wharfkit/contract'
export const abiBlob = Blob.from(
    'DmVvc2lvOjphYmkvMS4xAQphc3NldF90eXBlBnVpbnQxNiMHYWJ1c2VycwACBG5hbWUEbmFtZQV2b3RlcwZ1aW50NjQMYWRkY3VzdG9kaWFuAAEEbmFtZQRuYW1lCGF2ZXJhZ2VzAAQCaWQGdWludDY0BHR5cGUFdWludDgFdmFsdWUGdWludDY0CXRpbWVzdGFtcAp0aW1lX3BvaW50DGNhbmNlbGJvdW50eQACBG5hbWUEbmFtZQZyZWFzb24Gc3RyaW5nBWNsYWltAAEFb3duZXIEbmFtZQVjbGVhcgABBHBhaXIEbmFtZQljb25maWd1cmUAAQFnC2dsb2JhbGlucHV0CmN1c3RvZGlhbnMAAQRuYW1lBG5hbWUQZGFpbHlfZGF0YXBvaW50cwADAmlkBnVpbnQ2NAV2YWx1ZQZ1aW50NjQJdGltZXN0YW1wCnRpbWVfcG9pbnQKZGF0YXBvaW50cwAFAmlkBnVpbnQ2NAVvd25lcgRuYW1lBXZhbHVlBnVpbnQ2NAZtZWRpYW4GdWludDY0CXRpbWVzdGFtcAp0aW1lX3BvaW50DGRlbGN1c3RvZGlhbgABBG5hbWUEbmFtZQlkb25hdGlvbnMABQJpZAZ1aW50NjQHZG9uYXRvcgRuYW1lBHBhaXIEbmFtZQl0aW1lc3RhbXAKdGltZV9wb2ludAZhbW91bnQFYXNzZXQLZmxhZ21lZGlhbnMAAQlpc19hY3RpdmUEYm9vbAZnbG9iYWwAEQJpZAZ1aW50NjQWdG90YWxfZGF0YXBvaW50c19jb3VudAZ1aW50NjQNdG90YWxfY2xhaW1lZAVhc3NldBZsYXN0X2RhaWx5X2F2ZXJhZ2VfcnVuBnVpbnQzMhlkYXRhcG9pbnRzX3Blcl9pbnN0cnVtZW50BnVpbnQ2NBNiYXJzX3Blcl9pbnN0cnVtZW50BnVpbnQ2NA12b3RlX2ludGVydmFsBnVpbnQ2NA53cml0ZV9jb29sZG93bgZ1aW50NjQSYXBwcm92ZXJfdGhyZXNob2xkBnVpbnQ2NBthcHByb3Zpbmdfb3JhY2xlc190aHJlc2hvbGQGdWludDY0HmFwcHJvdmluZ19jdXN0b2RpYW5zX3RocmVzaG9sZAZ1aW50NjQMbWluaW11bV9yYW5rBnVpbnQ2NARwYWlkBnVpbnQ2NBBtaW5fYm91bnR5X2RlbGF5BnVpbnQ2NBBuZXdfYm91bnR5X2RlbGF5BnVpbnQ2NB9kYWlseV9kYXRhcG9pbnRzX3Blcl9pbnN0cnVtZW50BnVpbnQ2NBVkYWlseV9hdmVyYWdlX3RpbWVvdXQGdWludDMyC2dsb2JhbGlucHV0AA0ZZGF0YXBvaW50c19wZXJfaW5zdHJ1bWVudAZ1aW50NjQTYmFyc19wZXJfaW5zdHJ1bWVudAZ1aW50NjQNdm90ZV9pbnRlcnZhbAZ1aW50NjQOd3JpdGVfY29vbGRvd24GdWludDY0EmFwcHJvdmVyX3RocmVzaG9sZAZ1aW50NjQbYXBwcm92aW5nX29yYWNsZXNfdGhyZXNob2xkBnVpbnQ2NB5hcHByb3ZpbmdfY3VzdG9kaWFuc190aHJlc2hvbGQGdWludDY0DG1pbmltdW1fcmFuawZ1aW50NjQEcGFpZAZ1aW50NjQQbWluX2JvdW50eV9kZWxheQZ1aW50NjQQbmV3X2JvdW50eV9kZWxheQZ1aW50NjQfZGFpbHlfZGF0YXBvaW50c19wZXJfaW5zdHJ1bWVudAZ1aW50NjQVZGFpbHlfYXZlcmFnZV90aW1lb3V0BnVpbnQzMgZoYXNoZXMABgJpZAZ1aW50NjQFb3duZXIEbmFtZQptdWx0aXBhcnR5C2NoZWNrc3VtMjU2BGhhc2gLY2hlY2tzdW0yNTYGcmV2ZWFsBnN0cmluZwl0aW1lc3RhbXAKdGltZV9wb2ludAtpbml0bWVkaWFucwABCWlzX2FjdGl2ZQRib29sC21ha2VtZWRpYW5zAAAHbWVkaWFucwAFAmlkBnVpbnQ2NAR0eXBlBXVpbnQ4BXZhbHVlBnVpbnQ2NA1yZXF1ZXN0X2NvdW50BnVpbnQ2NAl0aW1lc3RhbXAKdGltZV9wb2ludAluZXdib3VudHkAAghwcm9wb3NlcgRuYW1lBHBhaXIJcGFpcmlucHV0B29nbG9iYWwAAgJpZAZ1aW50NjQWdG90YWxfZGF0YXBvaW50c19jb3VudAZ1aW50NjQJb2xkZ2xvYmFsAA4CaWQGdWludDY0FnRvdGFsX2RhdGFwb2ludHNfY291bnQGdWludDY0DXRvdGFsX2NsYWltZWQFYXNzZXQZZGF0YXBvaW50c19wZXJfaW5zdHJ1bWVudAZ1aW50NjQTYmFyc19wZXJfaW5zdHJ1bWVudAZ1aW50NjQNdm90ZV9pbnRlcnZhbAZ1aW50NjQOd3JpdGVfY29vbGRvd24GdWludDY0EmFwcHJvdmVyX3RocmVzaG9sZAZ1aW50NjQbYXBwcm92aW5nX29yYWNsZXNfdGhyZXNob2xkBnVpbnQ2NB5hcHByb3ZpbmdfY3VzdG9kaWFuc190aHJlc2hvbGQGdWludDY0DG1pbmltdW1fcmFuawZ1aW50NjQEcGFpZAZ1aW50NjQQbWluX2JvdW50eV9kZWxheQZ1aW50NjQQbmV3X2JvdW50eV9kZWxheQZ1aW50NjQJcGFpcmlucHV0AAgEbmFtZQRuYW1lC2Jhc2Vfc3ltYm9sBnN5bWJvbAliYXNlX3R5cGUKYXNzZXRfdHlwZQ1iYXNlX2NvbnRyYWN0BG5hbWUMcXVvdGVfc3ltYm9sBnN5bWJvbApxdW90ZV90eXBlCmFzc2V0X3R5cGUOcXVvdGVfY29udHJhY3QEbmFtZRBxdW90ZWRfcHJlY2lzaW9uBnVpbnQ2NAVwYWlycwAPBmFjdGl2ZQRib29sDmJvdW50eV9hd2FyZGVkBGJvb2wbYm91bnR5X2VkaXRlZF9ieV9jdXN0b2RpYW5zBGJvb2wIcHJvcG9zZXIEbmFtZQRuYW1lBG5hbWUNYm91bnR5X2Ftb3VudAVhc3NldBRhcHByb3ZpbmdfY3VzdG9kaWFucwZuYW1lW10RYXBwcm92aW5nX29yYWNsZXMGbmFtZVtdC2Jhc2Vfc3ltYm9sBnN5bWJvbAliYXNlX3R5cGUKYXNzZXRfdHlwZQ1iYXNlX2NvbnRyYWN0BG5hbWUMcXVvdGVfc3ltYm9sBnN5bWJvbApxdW90ZV90eXBlCmFzc2V0X3R5cGUOcXVvdGVfY29udHJhY3QEbmFtZRBxdW90ZWRfcHJlY2lzaW9uBnVpbnQ2NAVxdW90ZQACBXZhbHVlBnVpbnQ2NARwYWlyBG5hbWUHcmVndXNlcgABBW93bmVyBG5hbWUFc3RhdHMABQVvd25lcgRuYW1lCXRpbWVzdGFtcAp0aW1lX3BvaW50BWNvdW50BnVpbnQ2NApsYXN0X2NsYWltCnRpbWVfcG9pbnQHYmFsYW5jZQVhc3NldAx1bnZvdGVib3VudHkAAgVvd25lcgRuYW1lBmJvdW50eQRuYW1lC3VwZGF0ZXVzZXJzAAALdXBkdHZlcnNpb24AAAV1c2VycwAEBG5hbWUEbmFtZQxjb250cmlidXRpb24FYXNzZXQFc2NvcmUGdWludDY0EmNyZWF0aW9uX3RpbWVzdGFtcAp0aW1lX3BvaW50CnZvdGVhYnVzZXIAAgVvd25lcgRuYW1lBmFidXNlcgRuYW1lCnZvdGVib3VudHkAAgVvd25lcgRuYW1lBmJvdW50eQRuYW1lCnZvdGVyX2luZm8ACgVvd25lcgRuYW1lBXByb3h5BG5hbWUJcHJvZHVjZXJzBm5hbWVbXQZzdGFrZWQFaW50NjQQbGFzdF92b3RlX3dlaWdodAdmbG9hdDY0E3Byb3hpZWRfdm90ZV93ZWlnaHQHZmxvYXQ2NAhpc19wcm94eQRib29sBmZsYWdzMQZ1aW50MzIJcmVzZXJ2ZWQyBnVpbnQzMglyZXNlcnZlZDMFYXNzZXQFd3JpdGUAAgVvd25lcgRuYW1lBnF1b3RlcwdxdW90ZVtdEDCNSzRjjVIyDGFkZGN1c3RvZGlhbswLIkJZIFVTSU5HIFRISVMgU09GVFdBUkUsIFlPVSBBQ0tOT1dMRURHRSBBTkQgQUdSRUUgVEhBVCBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgQVMtSVMsIEFORCBUSEFUIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgTk9UIEdSQU5URUQgQU5EIERPRVMgTk9UIEdSQU5UIEFOWSBXQVJSQU5UWSwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgTEVHQUwgT1IgQ09OVkVOVElPTkFMLCBJTkNMVURJTkcgRk9SIExBVEVOVCBERUZFQ1RTLCBXSVRIIFJFU1BFQ1QgVE8gVEhFIFNPRlRXQVJFIEFORCBUSEUgU1BFQ0lGSUNBVElPTlMsIEFORCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRElTQ0xBSU1TIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBQQVJUSUNVTEFSIFBVUlBPU0UgSU5DTFVESU5HLCBXSVRIT1VUIExJTUlUQVRJT04sIEFOWSBMRUdBTCBXQVJSQU5UWS5cbklOIE5PIEVWRU5UIFdIQVRTT0VWRVIgU0hBTEwgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEJFIExJQUJMRSBUTyBZT1UgT1IgVE8gQU5ZIE9USEVSIFBFUlNPTiBPUiBFTlRJVFkgRk9SIEFOWSBBTkQgQUxMIERBTUFHRVMgT0YgV0hBVFNPRVZFUiBOQVRVUkUsIENIQVJBQ1RFUiBPUiBLSU5EIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBESVJFQ1QsIElOQ0lERU5UQUwsIENPTlNFUVVFTlRJQUwgT1IgSU5ESVJFQ1QgREFNQUdFUyBPUiBMT1NTRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBMT1NTIE9GIFBST0ZJVFMgT1IgTE9TUyBPRiBEQVRBKSBBUklTSU5HIE9VVCBPRiBUSEUgSU5TVEFMTEFUSU9OLCBVU0UgT1IgTUlTVVNFIE9GIFRIRSBTT0ZUV0FSRSBPUiBUSEUgU1BFQ0lGSUNBVElPTlMsIEVWRU4gSUYgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEhBUyBCRUVOIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFUyBPUiBMT1NTRVMuIEFOWSBTVEFURU1FTlRTIEJZIFRIRSBBVVRIT1IsIENPUFlSSUdIVCBIT0xERVIgT1IgT1RIRVJTIERPIE5PVCBDT05TVElUVVRFIFdBUlJBTlRJRVMgSEVSRVVOREVSIEFORCBETyBOT1QgRk9STSBQQVJUIE9GIFRISVMgRElTQ0xBSU1FUiBPRiBMSUFCSUxJVFkgQU5EIFNIQUxMIE5PVCBCRSBSRUxJRUQgVVBPTiBCWSBZT1UuXG5TVUJKRUNUIFRPIFRIRSBGT1JFR09JTkcgRElTQ0xBSU1FUlMgT0YgTElBQklMSVRZIEFORCBXQVJSQU5UWSBBTkQgVEhFIFRFUk1TIE9GIFRIRSBNSVQgTElDRU5TRSwgVEhFIFNPRlRXQVJFIE1BWSBCRSBVU0VEIFRPIFBFUkZPUk0gVEhFIFRBU0tTIERFU0NSSUJFRCBJTiBUSEUgUkVBRE1FLk1EIERPQ1VNRU5UIFRIQVQgQUNDT01QQU5JRVMgVEhFIFNPRlRXQVJFIFNPVVJDRSBDT0RFLCBBUyBBTUVOREVEIEJZIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBGUk9NIFRJTUUgVE8gVElNRS4iCgotLS3g89T0RIWmQQxjYW5jZWxib3VudHnMCyJCWSBVU0lORyBUSElTIFNPRlRXQVJFLCBZT1UgQUNLTk9XTEVER0UgQU5EIEFHUkVFIFRIQVQgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIEFTLUlTLCBBTkQgVEhBVCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgSEFTIE5PVCBHUkFOVEVEIEFORCBET0VTIE5PVCBHUkFOVCBBTlkgV0FSUkFOVFksIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIExFR0FMIE9SIENPTlZFTlRJT05BTCwgSU5DTFVESU5HIEZPUiBMQVRFTlQgREVGRUNUUywgV0lUSCBSRVNQRUNUIFRPIFRIRSBTT0ZUV0FSRSBBTkQgVEhFIFNQRUNJRklDQVRJT05TLCBBTkQgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIERJU0NMQUlNUyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgUEFSVElDVUxBUiBQVVJQT1NFIElOQ0xVRElORywgV0lUSE9VVCBMSU1JVEFUSU9OLCBBTlkgTEVHQUwgV0FSUkFOVFkuXG5JTiBOTyBFVkVOVCBXSEFUU09FVkVSIFNIQUxMIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBCRSBMSUFCTEUgVE8gWU9VIE9SIFRPIEFOWSBPVEhFUiBQRVJTT04gT1IgRU5USVRZIEZPUiBBTlkgQU5EIEFMTCBEQU1BR0VTIE9GIFdIQVRTT0VWRVIgTkFUVVJFLCBDSEFSQUNURVIgT1IgS0lORCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgRElSRUNULCBJTkNJREVOVEFMLCBDT05TRVFVRU5USUFMIE9SIElORElSRUNUIERBTUFHRVMgT1IgTE9TU0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgTE9TUyBPRiBQUk9GSVRTIE9SIExPU1MgT0YgREFUQSkgQVJJU0lORyBPVVQgT0YgVEhFIElOU1RBTExBVElPTiwgVVNFIE9SIE1JU1VTRSBPRiBUSEUgU09GVFdBUkUgT1IgVEhFIFNQRUNJRklDQVRJT05TLCBFVkVOIElGIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRVMgT1IgTE9TU0VTLiBBTlkgU1RBVEVNRU5UUyBCWSBUSEUgQVVUSE9SLCBDT1BZUklHSFQgSE9MREVSIE9SIE9USEVSUyBETyBOT1QgQ09OU1RJVFVURSBXQVJSQU5USUVTIEhFUkVVTkRFUiBBTkQgRE8gTk9UIEZPUk0gUEFSVCBPRiBUSElTIERJU0NMQUlNRVIgT0YgTElBQklMSVRZIEFORCBTSEFMTCBOT1QgQkUgUkVMSUVEIFVQT04gQlkgWU9VLlxuU1VCSkVDVCBUTyBUSEUgRk9SRUdPSU5HIERJU0NMQUlNRVJTIE9GIExJQUJJTElUWSBBTkQgV0FSUkFOVFkgQU5EIFRIRSBURVJNUyBPRiBUSEUgTUlUIExJQ0VOU0UsIFRIRSBTT0ZUV0FSRSBNQVkgQkUgVVNFRCBUTyBQRVJGT1JNIFRIRSBUQVNLUyBERVNDUklCRUQgSU4gVEhFIFJFQURNRS5NRCBET0NVTUVOVCBUSEFUIEFDQ09NUEFOSUVTIFRIRSBTT0ZUV0FSRSBTT1VSQ0UgQ09ERSwgQVMgQU1FTkRFRCBCWSBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRlJPTSBUSU1FIFRPIFRJTUUuIgoKLS0tAAAAAADpTEQFY2xhaW3MCyJCWSBVU0lORyBUSElTIFNPRlRXQVJFLCBZT1UgQUNLTk9XTEVER0UgQU5EIEFHUkVFIFRIQVQgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIEFTLUlTLCBBTkQgVEhBVCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgSEFTIE5PVCBHUkFOVEVEIEFORCBET0VTIE5PVCBHUkFOVCBBTlkgV0FSUkFOVFksIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIExFR0FMIE9SIENPTlZFTlRJT05BTCwgSU5DTFVESU5HIEZPUiBMQVRFTlQgREVGRUNUUywgV0lUSCBSRVNQRUNUIFRPIFRIRSBTT0ZUV0FSRSBBTkQgVEhFIFNQRUNJRklDQVRJT05TLCBBTkQgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIERJU0NMQUlNUyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgUEFSVElDVUxBUiBQVVJQT1NFIElOQ0xVRElORywgV0lUSE9VVCBMSU1JVEFUSU9OLCBBTlkgTEVHQUwgV0FSUkFOVFkuXG5JTiBOTyBFVkVOVCBXSEFUU09FVkVSIFNIQUxMIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBCRSBMSUFCTEUgVE8gWU9VIE9SIFRPIEFOWSBPVEhFUiBQRVJTT04gT1IgRU5USVRZIEZPUiBBTlkgQU5EIEFMTCBEQU1BR0VTIE9GIFdIQVRTT0VWRVIgTkFUVVJFLCBDSEFSQUNURVIgT1IgS0lORCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgRElSRUNULCBJTkNJREVOVEFMLCBDT05TRVFVRU5USUFMIE9SIElORElSRUNUIERBTUFHRVMgT1IgTE9TU0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgTE9TUyBPRiBQUk9GSVRTIE9SIExPU1MgT0YgREFUQSkgQVJJU0lORyBPVVQgT0YgVEhFIElOU1RBTExBVElPTiwgVVNFIE9SIE1JU1VTRSBPRiBUSEUgU09GVFdBUkUgT1IgVEhFIFNQRUNJRklDQVRJT05TLCBFVkVOIElGIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRVMgT1IgTE9TU0VTLiBBTlkgU1RBVEVNRU5UUyBCWSBUSEUgQVVUSE9SLCBDT1BZUklHSFQgSE9MREVSIE9SIE9USEVSUyBETyBOT1QgQ09OU1RJVFVURSBXQVJSQU5USUVTIEhFUkVVTkRFUiBBTkQgRE8gTk9UIEZPUk0gUEFSVCBPRiBUSElTIERJU0NMQUlNRVIgT0YgTElBQklMSVRZIEFORCBTSEFMTCBOT1QgQkUgUkVMSUVEIFVQT04gQlkgWU9VLlxuU1VCSkVDVCBUTyBUSEUgRk9SRUdPSU5HIERJU0NMQUlNRVJTIE9GIExJQUJJTElUWSBBTkQgV0FSUkFOVFkgQU5EIFRIRSBURVJNUyBPRiBUSEUgTUlUIExJQ0VOU0UsIFRIRSBTT0ZUV0FSRSBNQVkgQkUgVVNFRCBUTyBQRVJGT1JNIFRIRSBUQVNLUyBERVNDUklCRUQgSU4gVEhFIFJFQURNRS5NRCBET0NVTUVOVCBUSEFUIEFDQ09NUEFOSUVTIFRIRSBTT0ZUV0FSRSBTT1VSQ0UgQ09ERSwgQVMgQU1FTkRFRCBCWSBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRlJPTSBUSU1FIFRPIFRJTUUuIgoKLS0tAAAAAIBrVEQFY2xlYXLMCyJCWSBVU0lORyBUSElTIFNPRlRXQVJFLCBZT1UgQUNLTk9XTEVER0UgQU5EIEFHUkVFIFRIQVQgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIEFTLUlTLCBBTkQgVEhBVCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgSEFTIE5PVCBHUkFOVEVEIEFORCBET0VTIE5PVCBHUkFOVCBBTlkgV0FSUkFOVFksIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIExFR0FMIE9SIENPTlZFTlRJT05BTCwgSU5DTFVESU5HIEZPUiBMQVRFTlQgREVGRUNUUywgV0lUSCBSRVNQRUNUIFRPIFRIRSBTT0ZUV0FSRSBBTkQgVEhFIFNQRUNJRklDQVRJT05TLCBBTkQgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIERJU0NMQUlNUyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgUEFSVElDVUxBUiBQVVJQT1NFIElOQ0xVRElORywgV0lUSE9VVCBMSU1JVEFUSU9OLCBBTlkgTEVHQUwgV0FSUkFOVFkuXG5JTiBOTyBFVkVOVCBXSEFUU09FVkVSIFNIQUxMIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBCRSBMSUFCTEUgVE8gWU9VIE9SIFRPIEFOWSBPVEhFUiBQRVJTT04gT1IgRU5USVRZIEZPUiBBTlkgQU5EIEFMTCBEQU1BR0VTIE9GIFdIQVRTT0VWRVIgTkFUVVJFLCBDSEFSQUNURVIgT1IgS0lORCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgRElSRUNULCBJTkNJREVOVEFMLCBDT05TRVFVRU5USUFMIE9SIElORElSRUNUIERBTUFHRVMgT1IgTE9TU0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgTE9TUyBPRiBQUk9GSVRTIE9SIExPU1MgT0YgREFUQSkgQVJJU0lORyBPVVQgT0YgVEhFIElOU1RBTExBVElPTiwgVVNFIE9SIE1JU1VTRSBPRiBUSEUgU09GVFdBUkUgT1IgVEhFIFNQRUNJRklDQVRJT05TLCBFVkVOIElGIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRVMgT1IgTE9TU0VTLiBBTlkgU1RBVEVNRU5UUyBCWSBUSEUgQVVUSE9SLCBDT1BZUklHSFQgSE9MREVSIE9SIE9USEVSUyBETyBOT1QgQ09OU1RJVFVURSBXQVJSQU5USUVTIEhFUkVVTkRFUiBBTkQgRE8gTk9UIEZPUk0gUEFSVCBPRiBUSElTIERJU0NMQUlNRVIgT0YgTElBQklMSVRZIEFORCBTSEFMTCBOT1QgQkUgUkVMSUVEIFVQT04gQlkgWU9VLlxuU1VCSkVDVCBUTyBUSEUgRk9SRUdPSU5HIERJU0NMQUlNRVJTIE9GIExJQUJJTElUWSBBTkQgV0FSUkFOVFkgQU5EIFRIRSBURVJNUyBPRiBUSEUgTUlUIExJQ0VOU0UsIFRIRSBTT0ZUV0FSRSBNQVkgQkUgVVNFRCBUTyBQRVJGT1JNIFRIRSBUQVNLUyBERVNDUklCRUQgSU4gVEhFIFJFQURNRS5NRCBET0NVTUVOVCBUSEFUIEFDQ09NUEFOSUVTIFRIRSBTT0ZUV0FSRSBTT1VSQ0UgQ09ERSwgQVMgQU1FTkRFRCBCWSBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRlJPTSBUSU1FIFRPIFRJTUUuIgoKLS0tAABQVzO3JkUJY29uZmlndXJlzAsiQlkgVVNJTkcgVEhJUyBTT0ZUV0FSRSwgWU9VIEFDS05PV0xFREdFIEFORCBBR1JFRSBUSEFUIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBBUy1JUywgQU5EIFRIQVQgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEhBUyBOT1QgR1JBTlRFRCBBTkQgRE9FUyBOT1QgR1JBTlQgQU5ZIFdBUlJBTlRZLCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBMRUdBTCBPUiBDT05WRU5USU9OQUwsIElOQ0xVRElORyBGT1IgTEFURU5UIERFRkVDVFMsIFdJVEggUkVTUEVDVCBUTyBUSEUgU09GVFdBUkUgQU5EIFRIRSBTUEVDSUZJQ0FUSU9OUywgQU5EIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBESVNDTEFJTVMgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIFBBUlRJQ1VMQVIgUFVSUE9TRSBJTkNMVURJTkcsIFdJVEhPVVQgTElNSVRBVElPTiwgQU5ZIExFR0FMIFdBUlJBTlRZLlxuSU4gTk8gRVZFTlQgV0hBVFNPRVZFUiBTSEFMTCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgQkUgTElBQkxFIFRPIFlPVSBPUiBUTyBBTlkgT1RIRVIgUEVSU09OIE9SIEVOVElUWSBGT1IgQU5ZIEFORCBBTEwgREFNQUdFUyBPRiBXSEFUU09FVkVSIE5BVFVSRSwgQ0hBUkFDVEVSIE9SIEtJTkQgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIERJUkVDVCwgSU5DSURFTlRBTCwgQ09OU0VRVUVOVElBTCBPUiBJTkRJUkVDVCBEQU1BR0VTIE9SIExPU1NFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIExPU1MgT0YgUFJPRklUUyBPUiBMT1NTIE9GIERBVEEpIEFSSVNJTkcgT1VUIE9GIFRIRSBJTlNUQUxMQVRJT04sIFVTRSBPUiBNSVNVU0UgT0YgVEhFIFNPRlRXQVJFIE9SIFRIRSBTUEVDSUZJQ0FUSU9OUywgRVZFTiBJRiBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgSEFTIEJFRU4gQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0VTIE9SIExPU1NFUy4gQU5ZIFNUQVRFTUVOVFMgQlkgVEhFIEFVVEhPUiwgQ09QWVJJR0hUIEhPTERFUiBPUiBPVEhFUlMgRE8gTk9UIENPTlNUSVRVVEUgV0FSUkFOVElFUyBIRVJFVU5ERVIgQU5EIERPIE5PVCBGT1JNIFBBUlQgT0YgVEhJUyBESVNDTEFJTUVSIE9GIExJQUJJTElUWSBBTkQgU0hBTEwgTk9UIEJFIFJFTElFRCBVUE9OIEJZIFlPVS5cblNVQkpFQ1QgVE8gVEhFIEZPUkVHT0lORyBESVNDTEFJTUVSUyBPRiBMSUFCSUxJVFkgQU5EIFdBUlJBTlRZIEFORCBUSEUgVEVSTVMgT0YgVEhFIE1JVCBMSUNFTlNFLCBUSEUgU09GVFdBUkUgTUFZIEJFIFVTRUQgVE8gUEVSRk9STSBUSEUgVEFTS1MgREVTQ1JJQkVEIElOIFRIRSBSRUFETUUuTUQgRE9DVU1FTlQgVEhBVCBBQ0NPTVBBTklFUyBUSEUgU09GVFdBUkUgU09VUkNFIENPREUsIEFTIEFNRU5ERUQgQlkgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEZST00gVElNRSBUTyBUSU1FLiIKCi0tLTCNSzRjjaJKDGRlbGN1c3RvZGlhbswLIkJZIFVTSU5HIFRISVMgU09GVFdBUkUsIFlPVSBBQ0tOT1dMRURHRSBBTkQgQUdSRUUgVEhBVCBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgQVMtSVMsIEFORCBUSEFUIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgTk9UIEdSQU5URUQgQU5EIERPRVMgTk9UIEdSQU5UIEFOWSBXQVJSQU5UWSwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgTEVHQUwgT1IgQ09OVkVOVElPTkFMLCBJTkNMVURJTkcgRk9SIExBVEVOVCBERUZFQ1RTLCBXSVRIIFJFU1BFQ1QgVE8gVEhFIFNPRlRXQVJFIEFORCBUSEUgU1BFQ0lGSUNBVElPTlMsIEFORCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRElTQ0xBSU1TIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBQQVJUSUNVTEFSIFBVUlBPU0UgSU5DTFVESU5HLCBXSVRIT1VUIExJTUlUQVRJT04sIEFOWSBMRUdBTCBXQVJSQU5UWS5cbklOIE5PIEVWRU5UIFdIQVRTT0VWRVIgU0hBTEwgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEJFIExJQUJMRSBUTyBZT1UgT1IgVE8gQU5ZIE9USEVSIFBFUlNPTiBPUiBFTlRJVFkgRk9SIEFOWSBBTkQgQUxMIERBTUFHRVMgT0YgV0hBVFNPRVZFUiBOQVRVUkUsIENIQVJBQ1RFUiBPUiBLSU5EIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBESVJFQ1QsIElOQ0lERU5UQUwsIENPTlNFUVVFTlRJQUwgT1IgSU5ESVJFQ1QgREFNQUdFUyBPUiBMT1NTRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBMT1NTIE9GIFBST0ZJVFMgT1IgTE9TUyBPRiBEQVRBKSBBUklTSU5HIE9VVCBPRiBUSEUgSU5TVEFMTEFUSU9OLCBVU0UgT1IgTUlTVVNFIE9GIFRIRSBTT0ZUV0FSRSBPUiBUSEUgU1BFQ0lGSUNBVElPTlMsIEVWRU4gSUYgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEhBUyBCRUVOIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFUyBPUiBMT1NTRVMuIEFOWSBTVEFURU1FTlRTIEJZIFRIRSBBVVRIT1IsIENPUFlSSUdIVCBIT0xERVIgT1IgT1RIRVJTIERPIE5PVCBDT05TVElUVVRFIFdBUlJBTlRJRVMgSEVSRVVOREVSIEFORCBETyBOT1QgRk9STSBQQVJUIE9GIFRISVMgRElTQ0xBSU1FUiBPRiBMSUFCSUxJVFkgQU5EIFNIQUxMIE5PVCBCRSBSRUxJRUQgVVBPTiBCWSBZT1UuXG5TVUJKRUNUIFRPIFRIRSBGT1JFR09JTkcgRElTQ0xBSU1FUlMgT0YgTElBQklMSVRZIEFORCBXQVJSQU5UWSBBTkQgVEhFIFRFUk1TIE9GIFRIRSBNSVQgTElDRU5TRSwgVEhFIFNPRlRXQVJFIE1BWSBCRSBVU0VEIFRPIFBFUkZPUk0gVEhFIFRBU0tTIERFU0NSSUJFRCBJTiBUSEUgUkVBRE1FLk1EIERPQ1VNRU5UIFRIQVQgQUNDT01QQU5JRVMgVEhFIFNPRlRXQVJFIFNPVVJDRSBDT0RFLCBBUyBBTUVOREVEIEJZIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBGUk9NIFRJTUUgVE8gVElNRS4iCgotLS0A8DQuKZnddAtpbml0bWVkaWFucwAA8DQuKamgkQttYWtlbWVkaWFucwAAAPB5anq4mgluZXdib3VudHnMCyJCWSBVU0lORyBUSElTIFNPRlRXQVJFLCBZT1UgQUNLTk9XTEVER0UgQU5EIEFHUkVFIFRIQVQgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIEFTLUlTLCBBTkQgVEhBVCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgSEFTIE5PVCBHUkFOVEVEIEFORCBET0VTIE5PVCBHUkFOVCBBTlkgV0FSUkFOVFksIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIExFR0FMIE9SIENPTlZFTlRJT05BTCwgSU5DTFVESU5HIEZPUiBMQVRFTlQgREVGRUNUUywgV0lUSCBSRVNQRUNUIFRPIFRIRSBTT0ZUV0FSRSBBTkQgVEhFIFNQRUNJRklDQVRJT05TLCBBTkQgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIERJU0NMQUlNUyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgUEFSVElDVUxBUiBQVVJQT1NFIElOQ0xVRElORywgV0lUSE9VVCBMSU1JVEFUSU9OLCBBTlkgTEVHQUwgV0FSUkFOVFkuXG5JTiBOTyBFVkVOVCBXSEFUU09FVkVSIFNIQUxMIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBCRSBMSUFCTEUgVE8gWU9VIE9SIFRPIEFOWSBPVEhFUiBQRVJTT04gT1IgRU5USVRZIEZPUiBBTlkgQU5EIEFMTCBEQU1BR0VTIE9GIFdIQVRTT0VWRVIgTkFUVVJFLCBDSEFSQUNURVIgT1IgS0lORCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgRElSRUNULCBJTkNJREVOVEFMLCBDT05TRVFVRU5USUFMIE9SIElORElSRUNUIERBTUFHRVMgT1IgTE9TU0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgTE9TUyBPRiBQUk9GSVRTIE9SIExPU1MgT0YgREFUQSkgQVJJU0lORyBPVVQgT0YgVEhFIElOU1RBTExBVElPTiwgVVNFIE9SIE1JU1VTRSBPRiBUSEUgU09GVFdBUkUgT1IgVEhFIFNQRUNJRklDQVRJT05TLCBFVkVOIElGIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRVMgT1IgTE9TU0VTLiBBTlkgU1RBVEVNRU5UUyBCWSBUSEUgQVVUSE9SLCBDT1BZUklHSFQgSE9MREVSIE9SIE9USEVSUyBETyBOT1QgQ09OU1RJVFVURSBXQVJSQU5USUVTIEhFUkVVTkRFUiBBTkQgRE8gTk9UIEZPUk0gUEFSVCBPRiBUSElTIERJU0NMQUlNRVIgT0YgTElBQklMSVRZIEFORCBTSEFMTCBOT1QgQkUgUkVMSUVEIFVQT04gQlkgWU9VLlxuU1VCSkVDVCBUTyBUSEUgRk9SRUdPSU5HIERJU0NMQUlNRVJTIE9GIExJQUJJTElUWSBBTkQgV0FSUkFOVFkgQU5EIFRIRSBURVJNUyBPRiBUSEUgTUlUIExJQ0VOU0UsIFRIRSBTT0ZUV0FSRSBNQVkgQkUgVVNFRCBUTyBQRVJGT1JNIFRIRSBUQVNLUyBERVNDUklCRUQgSU4gVEhFIFJFQURNRS5NRCBET0NVTUVOVCBUSEFUIEFDQ09NUEFOSUVTIFRIRSBTT0ZUV0FSRSBTT1VSQ0UgQ09ERSwgQVMgQU1FTkRFRCBCWSBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRlJPTSBUSU1FIFRPIFRJTUUuIgoKLS0tAAAA4CqsmboHcmVndXNlcswLIkJZIFVTSU5HIFRISVMgU09GVFdBUkUsIFlPVSBBQ0tOT1dMRURHRSBBTkQgQUdSRUUgVEhBVCBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgQVMtSVMsIEFORCBUSEFUIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgTk9UIEdSQU5URUQgQU5EIERPRVMgTk9UIEdSQU5UIEFOWSBXQVJSQU5UWSwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgTEVHQUwgT1IgQ09OVkVOVElPTkFMLCBJTkNMVURJTkcgRk9SIExBVEVOVCBERUZFQ1RTLCBXSVRIIFJFU1BFQ1QgVE8gVEhFIFNPRlRXQVJFIEFORCBUSEUgU1BFQ0lGSUNBVElPTlMsIEFORCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRElTQ0xBSU1TIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBQQVJUSUNVTEFSIFBVUlBPU0UgSU5DTFVESU5HLCBXSVRIT1VUIExJTUlUQVRJT04sIEFOWSBMRUdBTCBXQVJSQU5UWS5cbklOIE5PIEVWRU5UIFdIQVRTT0VWRVIgU0hBTEwgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEJFIExJQUJMRSBUTyBZT1UgT1IgVE8gQU5ZIE9USEVSIFBFUlNPTiBPUiBFTlRJVFkgRk9SIEFOWSBBTkQgQUxMIERBTUFHRVMgT0YgV0hBVFNPRVZFUiBOQVRVUkUsIENIQVJBQ1RFUiBPUiBLSU5EIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBESVJFQ1QsIElOQ0lERU5UQUwsIENPTlNFUVVFTlRJQUwgT1IgSU5ESVJFQ1QgREFNQUdFUyBPUiBMT1NTRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBMT1NTIE9GIFBST0ZJVFMgT1IgTE9TUyBPRiBEQVRBKSBBUklTSU5HIE9VVCBPRiBUSEUgSU5TVEFMTEFUSU9OLCBVU0UgT1IgTUlTVVNFIE9GIFRIRSBTT0ZUV0FSRSBPUiBUSEUgU1BFQ0lGSUNBVElPTlMsIEVWRU4gSUYgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEhBUyBCRUVOIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFUyBPUiBMT1NTRVMuIEFOWSBTVEFURU1FTlRTIEJZIFRIRSBBVVRIT1IsIENPUFlSSUdIVCBIT0xERVIgT1IgT1RIRVJTIERPIE5PVCBDT05TVElUVVRFIFdBUlJBTlRJRVMgSEVSRVVOREVSIEFORCBETyBOT1QgRk9STSBQQVJUIE9GIFRISVMgRElTQ0xBSU1FUiBPRiBMSUFCSUxJVFkgQU5EIFNIQUxMIE5PVCBCRSBSRUxJRUQgVVBPTiBCWSBZT1UuXG5TVUJKRUNUIFRPIFRIRSBGT1JFR09JTkcgRElTQ0xBSU1FUlMgT0YgTElBQklMSVRZIEFORCBXQVJSQU5UWSBBTkQgVEhFIFRFUk1TIE9GIFRIRSBNSVQgTElDRU5TRSwgVEhFIFNPRlRXQVJFIE1BWSBCRSBVU0VEIFRPIFBFUkZPUk0gVEhFIFRBU0tTIERFU0NSSUJFRCBJTiBUSEUgUkVBRE1FLk1EIERPQ1VNRU5UIFRIQVQgQUNDT01QQU5JRVMgVEhFIFNPRlRXQVJFIFNPVVJDRSBDT0RFLCBBUyBBTUVOREVEIEJZIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBGUk9NIFRJTUUgVE8gVElNRS4iCgotLS3g89T0qEz31Ax1bnZvdGVib3VudHnMCyJCWSBVU0lORyBUSElTIFNPRlRXQVJFLCBZT1UgQUNLTk9XTEVER0UgQU5EIEFHUkVFIFRIQVQgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIEFTLUlTLCBBTkQgVEhBVCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgSEFTIE5PVCBHUkFOVEVEIEFORCBET0VTIE5PVCBHUkFOVCBBTlkgV0FSUkFOVFksIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIExFR0FMIE9SIENPTlZFTlRJT05BTCwgSU5DTFVESU5HIEZPUiBMQVRFTlQgREVGRUNUUywgV0lUSCBSRVNQRUNUIFRPIFRIRSBTT0ZUV0FSRSBBTkQgVEhFIFNQRUNJRklDQVRJT05TLCBBTkQgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIERJU0NMQUlNUyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgUEFSVElDVUxBUiBQVVJQT1NFIElOQ0xVRElORywgV0lUSE9VVCBMSU1JVEFUSU9OLCBBTlkgTEVHQUwgV0FSUkFOVFkuXG5JTiBOTyBFVkVOVCBXSEFUU09FVkVSIFNIQUxMIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBCRSBMSUFCTEUgVE8gWU9VIE9SIFRPIEFOWSBPVEhFUiBQRVJTT04gT1IgRU5USVRZIEZPUiBBTlkgQU5EIEFMTCBEQU1BR0VTIE9GIFdIQVRTT0VWRVIgTkFUVVJFLCBDSEFSQUNURVIgT1IgS0lORCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgRElSRUNULCBJTkNJREVOVEFMLCBDT05TRVFVRU5USUFMIE9SIElORElSRUNUIERBTUFHRVMgT1IgTE9TU0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgTE9TUyBPRiBQUk9GSVRTIE9SIExPU1MgT0YgREFUQSkgQVJJU0lORyBPVVQgT0YgVEhFIElOU1RBTExBVElPTiwgVVNFIE9SIE1JU1VTRSBPRiBUSEUgU09GVFdBUkUgT1IgVEhFIFNQRUNJRklDQVRJT05TLCBFVkVOIElGIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRVMgT1IgTE9TU0VTLiBBTlkgU1RBVEVNRU5UUyBCWSBUSEUgQVVUSE9SLCBDT1BZUklHSFQgSE9MREVSIE9SIE9USEVSUyBETyBOT1QgQ09OU1RJVFVURSBXQVJSQU5USUVTIEhFUkVVTkRFUiBBTkQgRE8gTk9UIEZPUk0gUEFSVCBPRiBUSElTIERJU0NMQUlNRVIgT0YgTElBQklMSVRZIEFORCBTSEFMTCBOT1QgQkUgUkVMSUVEIFVQT04gQlkgWU9VLlxuU1VCSkVDVCBUTyBUSEUgRk9SRUdPSU5HIERJU0NMQUlNRVJTIE9GIExJQUJJTElUWSBBTkQgV0FSUkFOVFkgQU5EIFRIRSBURVJNUyBPRiBUSEUgTUlUIExJQ0VOU0UsIFRIRSBTT0ZUV0FSRSBNQVkgQkUgVVNFRCBUTyBQRVJGT1JNIFRIRSBUQVNLUyBERVNDUklCRUQgSU4gVEhFIFJFQURNRS5NRCBET0NVTUVOVCBUSEFUIEFDQ09NUEFOSUVTIFRIRSBTT0ZUV0FSRSBTT1VSQ0UgQ09ERSwgQVMgQU1FTkRFRCBCWSBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRlJPTSBUSU1FIFRPIFRJTUUuIgoKLS0tAPBVWKtsUtULdXBkYXRldXNlcnPMCyJCWSBVU0lORyBUSElTIFNPRlRXQVJFLCBZT1UgQUNLTk9XTEVER0UgQU5EIEFHUkVFIFRIQVQgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIEFTLUlTLCBBTkQgVEhBVCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgSEFTIE5PVCBHUkFOVEVEIEFORCBET0VTIE5PVCBHUkFOVCBBTlkgV0FSUkFOVFksIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIExFR0FMIE9SIENPTlZFTlRJT05BTCwgSU5DTFVESU5HIEZPUiBMQVRFTlQgREVGRUNUUywgV0lUSCBSRVNQRUNUIFRPIFRIRSBTT0ZUV0FSRSBBTkQgVEhFIFNQRUNJRklDQVRJT05TLCBBTkQgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIERJU0NMQUlNUyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgUEFSVElDVUxBUiBQVVJQT1NFIElOQ0xVRElORywgV0lUSE9VVCBMSU1JVEFUSU9OLCBBTlkgTEVHQUwgV0FSUkFOVFkuXG5JTiBOTyBFVkVOVCBXSEFUU09FVkVSIFNIQUxMIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBCRSBMSUFCTEUgVE8gWU9VIE9SIFRPIEFOWSBPVEhFUiBQRVJTT04gT1IgRU5USVRZIEZPUiBBTlkgQU5EIEFMTCBEQU1BR0VTIE9GIFdIQVRTT0VWRVIgTkFUVVJFLCBDSEFSQUNURVIgT1IgS0lORCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgRElSRUNULCBJTkNJREVOVEFMLCBDT05TRVFVRU5USUFMIE9SIElORElSRUNUIERBTUFHRVMgT1IgTE9TU0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgTE9TUyBPRiBQUk9GSVRTIE9SIExPU1MgT0YgREFUQSkgQVJJU0lORyBPVVQgT0YgVEhFIElOU1RBTExBVElPTiwgVVNFIE9SIE1JU1VTRSBPRiBUSEUgU09GVFdBUkUgT1IgVEhFIFNQRUNJRklDQVRJT05TLCBFVkVOIElGIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRVMgT1IgTE9TU0VTLiBBTlkgU1RBVEVNRU5UUyBCWSBUSEUgQVVUSE9SLCBDT1BZUklHSFQgSE9MREVSIE9SIE9USEVSUyBETyBOT1QgQ09OU1RJVFVURSBXQVJSQU5USUVTIEhFUkVVTkRFUiBBTkQgRE8gTk9UIEZPUk0gUEFSVCBPRiBUSElTIERJU0NMQUlNRVIgT0YgTElBQklMSVRZIEFORCBTSEFMTCBOT1QgQkUgUkVMSUVEIFVQT04gQlkgWU9VLlxuU1VCSkVDVCBUTyBUSEUgRk9SRUdPSU5HIERJU0NMQUlNRVJTIE9GIExJQUJJTElUWSBBTkQgV0FSUkFOVFkgQU5EIFRIRSBURVJNUyBPRiBUSEUgTUlUIExJQ0VOU0UsIFRIRSBTT0ZUV0FSRSBNQVkgQkUgVVNFRCBUTyBQRVJGT1JNIFRIRSBUQVNLUyBERVNDUklCRUQgSU4gVEhFIFJFQURNRS5NRCBET0NVTUVOVCBUSEFUIEFDQ09NUEFOSUVTIFRIRSBTT0ZUV0FSRSBTT1VSQ0UgQ09ERSwgQVMgQU1FTkRFRCBCWSBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRlJPTSBUSU1FIFRPIFRJTUUuIgoKLS0tACZ1+KqdU9ULdXBkdHZlcnNpb24AAMBVWB+jMt0Kdm90ZWFidXNlcswLIkJZIFVTSU5HIFRISVMgU09GVFdBUkUsIFlPVSBBQ0tOT1dMRURHRSBBTkQgQUdSRUUgVEhBVCBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgQVMtSVMsIEFORCBUSEFUIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBIQVMgTk9UIEdSQU5URUQgQU5EIERPRVMgTk9UIEdSQU5UIEFOWSBXQVJSQU5UWSwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgTEVHQUwgT1IgQ09OVkVOVElPTkFMLCBJTkNMVURJTkcgRk9SIExBVEVOVCBERUZFQ1RTLCBXSVRIIFJFU1BFQ1QgVE8gVEhFIFNPRlRXQVJFIEFORCBUSEUgU1BFQ0lGSUNBVElPTlMsIEFORCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgRElTQ0xBSU1TIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBQQVJUSUNVTEFSIFBVUlBPU0UgSU5DTFVESU5HLCBXSVRIT1VUIExJTUlUQVRJT04sIEFOWSBMRUdBTCBXQVJSQU5UWS5cbklOIE5PIEVWRU5UIFdIQVRTT0VWRVIgU0hBTEwgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEJFIExJQUJMRSBUTyBZT1UgT1IgVE8gQU5ZIE9USEVSIFBFUlNPTiBPUiBFTlRJVFkgRk9SIEFOWSBBTkQgQUxMIERBTUFHRVMgT0YgV0hBVFNPRVZFUiBOQVRVUkUsIENIQVJBQ1RFUiBPUiBLSU5EIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBESVJFQ1QsIElOQ0lERU5UQUwsIENPTlNFUVVFTlRJQUwgT1IgSU5ESVJFQ1QgREFNQUdFUyBPUiBMT1NTRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBMT1NTIE9GIFBST0ZJVFMgT1IgTE9TUyBPRiBEQVRBKSBBUklTSU5HIE9VVCBPRiBUSEUgSU5TVEFMTEFUSU9OLCBVU0UgT1IgTUlTVVNFIE9GIFRIRSBTT0ZUV0FSRSBPUiBUSEUgU1BFQ0lGSUNBVElPTlMsIEVWRU4gSUYgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEhBUyBCRUVOIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFUyBPUiBMT1NTRVMuIEFOWSBTVEFURU1FTlRTIEJZIFRIRSBBVVRIT1IsIENPUFlSSUdIVCBIT0xERVIgT1IgT1RIRVJTIERPIE5PVCBDT05TVElUVVRFIFdBUlJBTlRJRVMgSEVSRVVOREVSIEFORCBETyBOT1QgRk9STSBQQVJUIE9GIFRISVMgRElTQ0xBSU1FUiBPRiBMSUFCSUxJVFkgQU5EIFNIQUxMIE5PVCBCRSBSRUxJRUQgVVBPTiBCWSBZT1UuXG5TVUJKRUNUIFRPIFRIRSBGT1JFR09JTkcgRElTQ0xBSU1FUlMgT0YgTElBQklMSVRZIEFORCBXQVJSQU5UWSBBTkQgVEhFIFRFUk1TIE9GIFRIRSBNSVQgTElDRU5TRSwgVEhFIFNPRlRXQVJFIE1BWSBCRSBVU0VEIFRPIFBFUkZPUk0gVEhFIFRBU0tTIERFU0NSSUJFRCBJTiBUSEUgUkVBRE1FLk1EIERPQ1VNRU5UIFRIQVQgQUNDT01QQU5JRVMgVEhFIFNPRlRXQVJFIFNPVVJDRSBDT0RFLCBBUyBBTUVOREVEIEJZIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBGUk9NIFRJTUUgVE8gVElNRS4iCgotLS0AgM9T06My3Qp2b3RlYm91bnR5zAsiQlkgVVNJTkcgVEhJUyBTT0ZUV0FSRSwgWU9VIEFDS05PV0xFREdFIEFORCBBR1JFRSBUSEFUIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBBUy1JUywgQU5EIFRIQVQgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEhBUyBOT1QgR1JBTlRFRCBBTkQgRE9FUyBOT1QgR1JBTlQgQU5ZIFdBUlJBTlRZLCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBMRUdBTCBPUiBDT05WRU5USU9OQUwsIElOQ0xVRElORyBGT1IgTEFURU5UIERFRkVDVFMsIFdJVEggUkVTUEVDVCBUTyBUSEUgU09GVFdBUkUgQU5EIFRIRSBTUEVDSUZJQ0FUSU9OUywgQU5EIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBESVNDTEFJTVMgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIFBBUlRJQ1VMQVIgUFVSUE9TRSBJTkNMVURJTkcsIFdJVEhPVVQgTElNSVRBVElPTiwgQU5ZIExFR0FMIFdBUlJBTlRZLlxuSU4gTk8gRVZFTlQgV0hBVFNPRVZFUiBTSEFMTCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgQkUgTElBQkxFIFRPIFlPVSBPUiBUTyBBTlkgT1RIRVIgUEVSU09OIE9SIEVOVElUWSBGT1IgQU5ZIEFORCBBTEwgREFNQUdFUyBPRiBXSEFUU09FVkVSIE5BVFVSRSwgQ0hBUkFDVEVSIE9SIEtJTkQgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIERJUkVDVCwgSU5DSURFTlRBTCwgQ09OU0VRVUVOVElBTCBPUiBJTkRJUkVDVCBEQU1BR0VTIE9SIExPU1NFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIExPU1MgT0YgUFJPRklUUyBPUiBMT1NTIE9GIERBVEEpIEFSSVNJTkcgT1VUIE9GIFRIRSBJTlNUQUxMQVRJT04sIFVTRSBPUiBNSVNVU0UgT0YgVEhFIFNPRlRXQVJFIE9SIFRIRSBTUEVDSUZJQ0FUSU9OUywgRVZFTiBJRiBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgSEFTIEJFRU4gQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0VTIE9SIExPU1NFUy4gQU5ZIFNUQVRFTUVOVFMgQlkgVEhFIEFVVEhPUiwgQ09QWVJJR0hUIEhPTERFUiBPUiBPVEhFUlMgRE8gTk9UIENPTlNUSVRVVEUgV0FSUkFOVElFUyBIRVJFVU5ERVIgQU5EIERPIE5PVCBGT1JNIFBBUlQgT0YgVEhJUyBESVNDTEFJTUVSIE9GIExJQUJJTElUWSBBTkQgU0hBTEwgTk9UIEJFIFJFTElFRCBVUE9OIEJZIFlPVS5cblNVQkpFQ1QgVE8gVEhFIEZPUkVHT0lORyBESVNDTEFJTUVSUyBPRiBMSUFCSUxJVFkgQU5EIFdBUlJBTlRZIEFORCBUSEUgVEVSTVMgT0YgVEhFIE1JVCBMSUNFTlNFLCBUSEUgU09GVFdBUkUgTUFZIEJFIFVTRUQgVE8gUEVSRk9STSBUSEUgVEFTS1MgREVTQ1JJQkVEIElOIFRIRSBSRUFETUUuTUQgRE9DVU1FTlQgVEhBVCBBQ0NPTVBBTklFUyBUSEUgU09GVFdBUkUgU09VUkNFIENPREUsIEFTIEFNRU5ERUQgQlkgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEZST00gVElNRSBUTyBUSU1FLiIKCi0tLQAAAAAAld3lBXdyaXRlzAsiQlkgVVNJTkcgVEhJUyBTT0ZUV0FSRSwgWU9VIEFDS05PV0xFREdFIEFORCBBR1JFRSBUSEFUIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBBUy1JUywgQU5EIFRIQVQgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEhBUyBOT1QgR1JBTlRFRCBBTkQgRE9FUyBOT1QgR1JBTlQgQU5ZIFdBUlJBTlRZLCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBMRUdBTCBPUiBDT05WRU5USU9OQUwsIElOQ0xVRElORyBGT1IgTEFURU5UIERFRkVDVFMsIFdJVEggUkVTUEVDVCBUTyBUSEUgU09GVFdBUkUgQU5EIFRIRSBTUEVDSUZJQ0FUSU9OUywgQU5EIFRIRSBBVVRIT1IgT1IgQ09QWVJJR0hUIEhPTERFUiBESVNDTEFJTVMgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIFBBUlRJQ1VMQVIgUFVSUE9TRSBJTkNMVURJTkcsIFdJVEhPVVQgTElNSVRBVElPTiwgQU5ZIExFR0FMIFdBUlJBTlRZLlxuSU4gTk8gRVZFTlQgV0hBVFNPRVZFUiBTSEFMTCBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgQkUgTElBQkxFIFRPIFlPVSBPUiBUTyBBTlkgT1RIRVIgUEVSU09OIE9SIEVOVElUWSBGT1IgQU5ZIEFORCBBTEwgREFNQUdFUyBPRiBXSEFUU09FVkVSIE5BVFVSRSwgQ0hBUkFDVEVSIE9SIEtJTkQgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIERJUkVDVCwgSU5DSURFTlRBTCwgQ09OU0VRVUVOVElBTCBPUiBJTkRJUkVDVCBEQU1BR0VTIE9SIExPU1NFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIExPU1MgT0YgUFJPRklUUyBPUiBMT1NTIE9GIERBVEEpIEFSSVNJTkcgT1VUIE9GIFRIRSBJTlNUQUxMQVRJT04sIFVTRSBPUiBNSVNVU0UgT0YgVEhFIFNPRlRXQVJFIE9SIFRIRSBTUEVDSUZJQ0FUSU9OUywgRVZFTiBJRiBUSEUgQVVUSE9SIE9SIENPUFlSSUdIVCBIT0xERVIgSEFTIEJFRU4gQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0VTIE9SIExPU1NFUy4gQU5ZIFNUQVRFTUVOVFMgQlkgVEhFIEFVVEhPUiwgQ09QWVJJR0hUIEhPTERFUiBPUiBPVEhFUlMgRE8gTk9UIENPTlNUSVRVVEUgV0FSUkFOVElFUyBIRVJFVU5ERVIgQU5EIERPIE5PVCBGT1JNIFBBUlQgT0YgVEhJUyBESVNDTEFJTUVSIE9GIExJQUJJTElUWSBBTkQgU0hBTEwgTk9UIEJFIFJFTElFRCBVUE9OIEJZIFlPVS5cblNVQkpFQ1QgVE8gVEhFIEZPUkVHT0lORyBESVNDTEFJTUVSUyBPRiBMSUFCSUxJVFkgQU5EIFdBUlJBTlRZIEFORCBUSEUgVEVSTVMgT0YgVEhFIE1JVCBMSUNFTlNFLCBUSEUgU09GVFdBUkUgTUFZIEJFIFVTRUQgVE8gUEVSRk9STSBUSEUgVEFTS1MgREVTQ1JJQkVEIElOIFRIRSBSRUFETUUuTUQgRE9DVU1FTlQgVEhBVCBBQ0NPTVBBTklFUyBUSEUgU09GVFdBUkUgU09VUkNFIENPREUsIEFTIEFNRU5ERUQgQlkgVEhFIEFVVEhPUiBPUiBDT1BZUklHSFQgSE9MREVSIEZST00gVElNRSBUTyBUSU1FLiIKCi0tLREAAAAAX4X1MQNpNjQAAAdhYnVzZXJzAAAAWDFz1TYDaTY0AAAIYXZlcmFnZXMAAJ7GJZqxRgNpNjQAAApjdXN0b2RpYW5zkGc12SQfnUkDaTY0AAAQZGFpbHlfZGF0YXBvaW50cwAAztPRarJJA2k2NAAACmRhdGFwb2ludHMAAMCTumwmTQNpNjQAAAlkb25hdGlvbnMA8DQuKclMXANpNjQAAAtmbGFnbWVkaWFucwAAAABEc2hkA2k2NAAACW9sZGdsb2JhbAAAAGJHc2hkA2k2NAAABmdsb2JhbAAAAABg1bBpA2k2NAAABmhhc2hlcwAAAABP45KSA2k2NAAAB21lZGlhbnMAAAAA4OtMnQNpNjQAAAVwYWlycwAAACCaQyOjA2k2NAAAB29nbG9iYWwAAAAAAHydqQNpNjQAAAVwYWlycwAAAAAAnE3GA2k2NAAABXN0YXRzAAAAAAB8FdYDaTY0AAAFdXNlcnMAAAAA4Ksy3QNpNjQAAAp2b3Rlcl9pbmZvAAAAAAA='
)
export const abi = ABI.from(abiBlob)
export namespace Types {
    @Struct.type('abusers')
    export class abusers extends Struct {
        @Struct.field(Name)
        declare name: Name
        @Struct.field(UInt64)
        declare votes: UInt64
    }
    @Struct.type('addcustodian')
    export class addcustodian extends Struct {
        @Struct.field(Name)
        declare name: Name
    }
    @Struct.type('averages')
    export class averages extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(UInt8)
        declare type: UInt8
        @Struct.field(UInt64)
        declare value: UInt64
        @Struct.field(TimePoint)
        declare timestamp: TimePoint
    }
    @Struct.type('cancelbounty')
    export class cancelbounty extends Struct {
        @Struct.field(Name)
        declare name: Name
        @Struct.field('string')
        declare reason: string
    }
    @Struct.type('claim')
    export class claim extends Struct {
        @Struct.field(Name)
        declare owner: Name
    }
    @Struct.type('clear')
    export class clear extends Struct {
        @Struct.field(Name)
        declare pair: Name
    }
    @Struct.type('globalinput')
    export class globalinput extends Struct {
        @Struct.field(UInt64)
        declare datapoints_per_instrument: UInt64
        @Struct.field(UInt64)
        declare bars_per_instrument: UInt64
        @Struct.field(UInt64)
        declare vote_interval: UInt64
        @Struct.field(UInt64)
        declare write_cooldown: UInt64
        @Struct.field(UInt64)
        declare approver_threshold: UInt64
        @Struct.field(UInt64)
        declare approving_oracles_threshold: UInt64
        @Struct.field(UInt64)
        declare approving_custodians_threshold: UInt64
        @Struct.field(UInt64)
        declare minimum_rank: UInt64
        @Struct.field(UInt64)
        declare paid: UInt64
        @Struct.field(UInt64)
        declare min_bounty_delay: UInt64
        @Struct.field(UInt64)
        declare new_bounty_delay: UInt64
        @Struct.field(UInt64)
        declare daily_datapoints_per_instrument: UInt64
        @Struct.field(UInt32)
        declare daily_average_timeout: UInt32
    }
    @Struct.type('configure')
    export class configure extends Struct {
        @Struct.field(globalinput)
        declare g: globalinput
    }
    @Struct.type('custodians')
    export class custodians extends Struct {
        @Struct.field(Name)
        declare name: Name
    }
    @Struct.type('daily_datapoints')
    export class daily_datapoints extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(UInt64)
        declare value: UInt64
        @Struct.field(TimePoint)
        declare timestamp: TimePoint
    }
    @Struct.type('datapoints')
    export class datapoints extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(UInt64)
        declare value: UInt64
        @Struct.field(UInt64)
        declare median: UInt64
        @Struct.field(TimePoint)
        declare timestamp: TimePoint
    }
    @Struct.type('delcustodian')
    export class delcustodian extends Struct {
        @Struct.field(Name)
        declare name: Name
    }
    @Struct.type('donations')
    export class donations extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(Name)
        declare donator: Name
        @Struct.field(Name)
        declare pair: Name
        @Struct.field(TimePoint)
        declare timestamp: TimePoint
        @Struct.field(Asset)
        declare amount: Asset
    }
    @Struct.type('flagmedians')
    export class flagmedians extends Struct {
        @Struct.field('bool')
        declare is_active: boolean
    }
    @Struct.type('global')
    export class global extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(UInt64)
        declare total_datapoints_count: UInt64
        @Struct.field(Asset)
        declare total_claimed: Asset
        @Struct.field(UInt32)
        declare last_daily_average_run: UInt32
        @Struct.field(UInt64)
        declare datapoints_per_instrument: UInt64
        @Struct.field(UInt64)
        declare bars_per_instrument: UInt64
        @Struct.field(UInt64)
        declare vote_interval: UInt64
        @Struct.field(UInt64)
        declare write_cooldown: UInt64
        @Struct.field(UInt64)
        declare approver_threshold: UInt64
        @Struct.field(UInt64)
        declare approving_oracles_threshold: UInt64
        @Struct.field(UInt64)
        declare approving_custodians_threshold: UInt64
        @Struct.field(UInt64)
        declare minimum_rank: UInt64
        @Struct.field(UInt64)
        declare paid: UInt64
        @Struct.field(UInt64)
        declare min_bounty_delay: UInt64
        @Struct.field(UInt64)
        declare new_bounty_delay: UInt64
        @Struct.field(UInt64)
        declare daily_datapoints_per_instrument: UInt64
        @Struct.field(UInt32)
        declare daily_average_timeout: UInt32
    }
    @Struct.type('hashes')
    export class hashes extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Checksum256)
        declare multiparty: Checksum256
        @Struct.field(Checksum256)
        declare hash: Checksum256
        @Struct.field('string')
        declare reveal: string
        @Struct.field(TimePoint)
        declare timestamp: TimePoint
    }
    @Struct.type('initmedians')
    export class initmedians extends Struct {
        @Struct.field('bool')
        declare is_active: boolean
    }
    @Struct.type('makemedians')
    export class makemedians extends Struct {}
    @Struct.type('medians')
    export class medians extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(UInt8)
        declare type: UInt8
        @Struct.field(UInt64)
        declare value: UInt64
        @Struct.field(UInt64)
        declare request_count: UInt64
        @Struct.field(TimePoint)
        declare timestamp: TimePoint
    }
    @Struct.type('pairinput')
    export class pairinput extends Struct {
        @Struct.field(Name)
        declare name: Name
        @Struct.field(Asset.Symbol)
        declare base_symbol: Asset.Symbol
        @Struct.field(UInt16)
        declare base_type: UInt16
        @Struct.field(Name)
        declare base_contract: Name
        @Struct.field(Asset.Symbol)
        declare quote_symbol: Asset.Symbol
        @Struct.field(UInt16)
        declare quote_type: UInt16
        @Struct.field(Name)
        declare quote_contract: Name
        @Struct.field(UInt64)
        declare quoted_precision: UInt64
    }
    @Struct.type('newbounty')
    export class newbounty extends Struct {
        @Struct.field(Name)
        declare proposer: Name
        @Struct.field(pairinput)
        declare pair: pairinput
    }
    @Struct.type('oglobal')
    export class oglobal extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(UInt64)
        declare total_datapoints_count: UInt64
    }
    @Struct.type('oldglobal')
    export class oldglobal extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(UInt64)
        declare total_datapoints_count: UInt64
        @Struct.field(Asset)
        declare total_claimed: Asset
        @Struct.field(UInt64)
        declare datapoints_per_instrument: UInt64
        @Struct.field(UInt64)
        declare bars_per_instrument: UInt64
        @Struct.field(UInt64)
        declare vote_interval: UInt64
        @Struct.field(UInt64)
        declare write_cooldown: UInt64
        @Struct.field(UInt64)
        declare approver_threshold: UInt64
        @Struct.field(UInt64)
        declare approving_oracles_threshold: UInt64
        @Struct.field(UInt64)
        declare approving_custodians_threshold: UInt64
        @Struct.field(UInt64)
        declare minimum_rank: UInt64
        @Struct.field(UInt64)
        declare paid: UInt64
        @Struct.field(UInt64)
        declare min_bounty_delay: UInt64
        @Struct.field(UInt64)
        declare new_bounty_delay: UInt64
    }
    @Struct.type('pairs')
    export class pairs extends Struct {
        @Struct.field('bool')
        declare active: boolean
        @Struct.field('bool')
        declare bounty_awarded: boolean
        @Struct.field('bool')
        declare bounty_edited_by_custodians: boolean
        @Struct.field(Name)
        declare proposer: Name
        @Struct.field(Name)
        declare name: Name
        @Struct.field(Asset)
        declare bounty_amount: Asset
        @Struct.field(Name, {array: true})
        declare approving_custodians: Name[]
        @Struct.field(Name, {array: true})
        declare approving_oracles: Name[]
        @Struct.field(Asset.Symbol)
        declare base_symbol: Asset.Symbol
        @Struct.field(UInt16)
        declare base_type: UInt16
        @Struct.field(Name)
        declare base_contract: Name
        @Struct.field(Asset.Symbol)
        declare quote_symbol: Asset.Symbol
        @Struct.field(UInt16)
        declare quote_type: UInt16
        @Struct.field(Name)
        declare quote_contract: Name
        @Struct.field(UInt64)
        declare quoted_precision: UInt64
    }
    @Struct.type('quote')
    export class quote extends Struct {
        @Struct.field(UInt64)
        declare value: UInt64
        @Struct.field(Name)
        declare pair: Name
    }
    @Struct.type('reguser')
    export class reguser extends Struct {
        @Struct.field(Name)
        declare owner: Name
    }
    @Struct.type('stats')
    export class stats extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(TimePoint)
        declare timestamp: TimePoint
        @Struct.field(UInt64)
        declare count: UInt64
        @Struct.field(TimePoint)
        declare last_claim: TimePoint
        @Struct.field(Asset)
        declare balance: Asset
    }
    @Struct.type('unvotebounty')
    export class unvotebounty extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Name)
        declare bounty: Name
    }
    @Struct.type('updateusers')
    export class updateusers extends Struct {}
    @Struct.type('updtversion')
    export class updtversion extends Struct {}
    @Struct.type('users')
    export class users extends Struct {
        @Struct.field(Name)
        declare name: Name
        @Struct.field(Asset)
        declare contribution: Asset
        @Struct.field(UInt64)
        declare score: UInt64
        @Struct.field(TimePoint)
        declare creation_timestamp: TimePoint
    }
    @Struct.type('voteabuser')
    export class voteabuser extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Name)
        declare abuser: Name
    }
    @Struct.type('votebounty')
    export class votebounty extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Name)
        declare bounty: Name
    }
    @Struct.type('voter_info')
    export class voter_info extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Name)
        declare proxy: Name
        @Struct.field(Name, {array: true})
        declare producers: Name[]
        @Struct.field(Int64)
        declare staked: Int64
        @Struct.field(Float64)
        declare last_vote_weight: Float64
        @Struct.field(Float64)
        declare proxied_vote_weight: Float64
        @Struct.field('bool')
        declare is_proxy: boolean
        @Struct.field(UInt32)
        declare flags1: UInt32
        @Struct.field(UInt32)
        declare reserved2: UInt32
        @Struct.field(Asset)
        declare reserved3: Asset
    }
    @Struct.type('write')
    export class write extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(quote, {array: true})
        declare quotes: quote[]
    }
}
export const TableMap = {
    abusers: Types.abusers,
    averages: Types.averages,
    custodians: Types.custodians,
    dailydatapnt: Types.daily_datapoints,
    datapoints: Types.datapoints,
    donations: Types.donations,
    flagmedians: Types.flagmedians,
    global: Types.oldglobal,
    globalv2: Types.global,
    hashes: Types.hashes,
    medians: Types.medians,
    npairs: Types.pairs,
    oglobal: Types.oglobal,
    pairs: Types.pairs,
    stats: Types.stats,
    users: Types.users,
    voters: Types.voter_info,
}
export interface TableTypes {
    abusers: Types.abusers
    averages: Types.averages
    custodians: Types.custodians
    dailydatapnt: Types.daily_datapoints
    datapoints: Types.datapoints
    donations: Types.donations
    flagmedians: Types.flagmedians
    global: Types.oldglobal
    globalv2: Types.global
    hashes: Types.hashes
    medians: Types.medians
    npairs: Types.pairs
    oglobal: Types.oglobal
    pairs: Types.pairs
    stats: Types.stats
    users: Types.users
    voters: Types.voter_info
}
export type RowType<T> = T extends keyof TableTypes ? TableTypes[T] : any
export type TableNames = keyof TableTypes
export namespace ActionParams {
    export namespace Type {
        export interface globalinput {
            datapoints_per_instrument: UInt64Type
            bars_per_instrument: UInt64Type
            vote_interval: UInt64Type
            write_cooldown: UInt64Type
            approver_threshold: UInt64Type
            approving_oracles_threshold: UInt64Type
            approving_custodians_threshold: UInt64Type
            minimum_rank: UInt64Type
            paid: UInt64Type
            min_bounty_delay: UInt64Type
            new_bounty_delay: UInt64Type
            daily_datapoints_per_instrument: UInt64Type
            daily_average_timeout: UInt32Type
        }
        export interface pairinput {
            name: NameType
            base_symbol: Asset.SymbolType
            base_type: UInt16Type
            base_contract: NameType
            quote_symbol: Asset.SymbolType
            quote_type: UInt16Type
            quote_contract: NameType
            quoted_precision: UInt64Type
        }
        export interface quote {
            value: UInt64Type
            pair: NameType
        }
    }
    export interface addcustodian {
        name: NameType
    }
    export interface cancelbounty {
        name: NameType
        reason: string
    }
    export interface claim {
        owner: NameType
    }
    export interface clear {
        pair: NameType
    }
    export interface configure {
        g: Type.globalinput
    }
    export interface delcustodian {
        name: NameType
    }
    export interface initmedians {
        is_active: boolean
    }
    export interface makemedians {}
    export interface newbounty {
        proposer: NameType
        pair: Type.pairinput
    }
    export interface reguser {
        owner: NameType
    }
    export interface unvotebounty {
        owner: NameType
        bounty: NameType
    }
    export interface updateusers {}
    export interface updtversion {}
    export interface voteabuser {
        owner: NameType
        abuser: NameType
    }
    export interface votebounty {
        owner: NameType
        bounty: NameType
    }
    export interface write {
        owner: NameType
        quotes: Type.quote[]
    }
}
export interface ActionNameParams {
    addcustodian: ActionParams.addcustodian
    cancelbounty: ActionParams.cancelbounty
    claim: ActionParams.claim
    clear: ActionParams.clear
    configure: ActionParams.configure
    delcustodian: ActionParams.delcustodian
    initmedians: ActionParams.initmedians
    makemedians: ActionParams.makemedians
    newbounty: ActionParams.newbounty
    reguser: ActionParams.reguser
    unvotebounty: ActionParams.unvotebounty
    updateusers: ActionParams.updateusers
    updtversion: ActionParams.updtversion
    voteabuser: ActionParams.voteabuser
    votebounty: ActionParams.votebounty
    write: ActionParams.write
}
export type ActionNames = keyof ActionNameParams
export class Contract extends BaseContract {
    constructor(args: PartialBy<ContractArgs, 'abi' | 'account'>) {
        super({
            client: args.client,
            abi: abi,
            account: args.account || Name.from('delphioracle'),
        })
    }
    action<T extends ActionNames>(
        name: T,
        data: ActionNameParams[T],
        options?: ActionOptions
    ): Action {
        return super.action(name, data, options)
    }
    table<T extends TableNames>(name: T, scope?: NameType): Table<RowType<T>> {
        return super.table(name, scope, TableMap[name])
    }
}
