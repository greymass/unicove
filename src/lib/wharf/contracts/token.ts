import type { Action, AssetType, NameType } from '@wharfkit/antelope';
import { ABI, Asset, Blob, Name, Struct } from '@wharfkit/antelope';
import type { ActionOptions, ContractArgs, PartialBy, Table } from '@wharfkit/contract';
import { Contract as BaseContract } from '@wharfkit/contract';
export const abiBlob = Blob.from(
	''
);
export const abi = ABI.from(abiBlob);
export namespace Types {
	@Struct.type('account')
	export class account extends Struct {
		@Struct.field(Asset)
		declare balance: Asset;
	}
	@Struct.type('close')
	export class close extends Struct {
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(Asset.Symbol)
		declare symbol: Asset.Symbol;
	}
	@Struct.type('create')
	export class create extends Struct {
		@Struct.field(Name)
		declare issuer: Name;
		@Struct.field(Asset)
		declare maximum_supply: Asset;
	}
	@Struct.type('currency_stats')
	export class currency_stats extends Struct {
		@Struct.field(Asset)
		declare supply: Asset;
		@Struct.field(Asset)
		declare max_supply: Asset;
		@Struct.field(Name)
		declare issuer: Name;
	}
	@Struct.type('issue')
	export class issue extends Struct {
		@Struct.field(Name)
		declare to: Name;
		@Struct.field(Asset)
		declare quantity: Asset;
		@Struct.field('string')
		declare memo: string;
	}
	@Struct.type('issuefixed')
	export class issuefixed extends Struct {
		@Struct.field(Name)
		declare to: Name;
		@Struct.field(Asset)
		declare supply: Asset;
		@Struct.field('string')
		declare memo: string;
	}
	@Struct.type('open')
	export class open extends Struct {
		@Struct.field(Name)
		declare owner: Name;
		@Struct.field(Asset.Symbol)
		declare symbol: Asset.Symbol;
		@Struct.field(Name)
		declare ram_payer: Name;
	}
	@Struct.type('retire')
	export class retire extends Struct {
		@Struct.field(Asset)
		declare quantity: Asset;
		@Struct.field('string')
		declare memo: string;
	}
	@Struct.type('setmaxsupply')
	export class setmaxsupply extends Struct {
		@Struct.field(Name)
		declare issuer: Name;
		@Struct.field(Asset)
		declare maximum_supply: Asset;
	}
	@Struct.type('transfer')
	export class transfer extends Struct {
		@Struct.field(Name)
		declare from: Name;
		@Struct.field(Name)
		declare to: Name;
		@Struct.field(Asset)
		declare quantity: Asset;
		@Struct.field('string')
		declare memo: string;
	}
}
export const TableMap = {
	accounts: Types.account,
	stat: Types.currency_stats
};
export interface TableTypes {
	accounts: Types.account;
	stat: Types.currency_stats;
}

export type RowType<T> = T extends keyof TableTypes ? TableTypes[T] : any;
export type TableNames = keyof TableTypes;
export namespace ActionParams {
	export namespace Type {}
	export interface close {
		owner: NameType;
		symbol: Asset.SymbolType;
	}
	export interface create {
		issuer: NameType;
		maximum_supply: AssetType;
	}
	export interface issue {
		to: NameType;
		quantity: AssetType;
		memo: string;
	}
	export interface issuefixed {
		to: NameType;
		supply: AssetType;
		memo: string;
	}
	export interface open {
		owner: NameType;
		symbol: Asset.SymbolType;
		ram_payer: NameType;
	}
	export interface retire {
		quantity: AssetType;
		memo: string;
	}
	export interface setmaxsupply {
		issuer: NameType;
		maximum_supply: AssetType;
	}
	export interface transfer {
		from: NameType;
		to: NameType;
		quantity: AssetType;
		memo: string;
	}
}
export interface ActionNameParams {
	close: ActionParams.close;
	create: ActionParams.create;
	issue: ActionParams.issue;
	issuefixed: ActionParams.issuefixed;
	open: ActionParams.open;
	retire: ActionParams.retire;
	setmaxsupply: ActionParams.setmaxsupply;
	transfer: ActionParams.transfer;
}
export type ActionNames = keyof ActionNameParams;
export class Contract extends BaseContract {
	constructor(args: PartialBy<ContractArgs, 'abi' | 'account'>) {
		super({
			client: args.client,
			abi: abi,
			account: args.account || Name.from('eosio.token')
		});
	}
	action<T extends ActionNames>(
		name: T,
		data: ActionNameParams[T],
		options?: ActionOptions
	): Action {
		return super.action(name, data, options);
	}
	table<T extends TableNames>(name: T, scope?: NameType): Table<RowType<T>> {
		return super.table(name, scope, TableMap[name]);
	}
}
