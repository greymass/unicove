// This file was generated by the storyblok CLI.
// DO NOT MODIFY THIS FILE BY HAND.
import type { ISbStoryData } from 'storyblok';
export interface AppScrollerStoryblok {
	label?: string;
	apps?: AppTileStoryblok[];
	component: 'appScroller';
	_uid: string;
	[k: string]: any;
}

export interface AssetStoryblok {
	alt: string | null;
	copyright?: string | null;
	fieldtype: 'asset';
	id: number;
	filename: string | null;
	name: string;
	title: string | null;
	focus: string | null;
	meta_data?: {
		[k: string]: any;
	};
	source?: string | null;
	is_external_url?: boolean;
	is_private?: boolean;
	src?: string;
	updated_at?: string;
	width?: number | null;
	height?: number | null;
	aspect_ratio?: number | null;
	public_id?: string | null;
	content_type?: string;
	[k: string]: any;
}

export type MultilinkStoryblok =
	| {
			fieldtype: 'multilink';
			id: string;
			url: string;
			cached_url: string;
			target?: '_blank' | '_self';
			anchor?: string;
			rel?: string;
			title?: string;
			prep?: string;
			linktype: 'story';
			story?: {
				name: string;
				created_at?: string;
				published_at?: string;
				id: number;
				uuid: string;
				content?: {
					[k: string]: any;
				};
				slug: string;
				full_slug: string;
				sort_by_date?: null | string;
				position?: number;
				tag_list?: string[];
				is_startpage?: boolean;
				parent_id?: null | number;
				meta_data?: null | {
					[k: string]: any;
				};
				group_id?: string;
				first_published_at?: string;
				release_id?: null | number;
				lang?: string;
				path?: null | string;
				alternates?: any[];
				default_full_slug?: null | string;
				translated_slugs?: null | any[];
				[k: string]: any;
			};
			[k: string]: any;
	  }
	| {
			fieldtype: 'multilink';
			id: string;
			url: string;
			cached_url: string;
			target?: '_blank' | '_self';
			linktype: 'url';
			rel?: string;
			title?: string;
			[k: string]: any;
	  }
	| {
			fieldtype: 'multilink';
			id: string;
			url: string;
			cached_url: string;
			target?: '_blank' | '_self';
			email?: string;
			linktype: 'email';
			[k: string]: any;
	  }
	| {
			fieldtype: 'multilink';
			id: string;
			url: string;
			cached_url: string;
			target?: '_blank' | '_self';
			linktype: 'asset';
			[k: string]: any;
	  };

export interface AppTileStoryblok {
	name?: string;
	icon?: AssetStoryblok;
	link?: Exclude<MultilinkStoryblok, { linktype?: 'email' } | { linktype?: 'asset' }>;
	component: 'appTile';
	_uid: string;
	[k: string]: any;
}

export interface ButtonStoryblok {
	text?: string;
	link?: Exclude<MultilinkStoryblok, { linktype?: 'email' } | { linktype?: 'asset' }>;
	type?: '' | 'primary' | 'text';
	size?: '' | 'normal' | 'small';
	color?: '' | 'green' | 'orange' | 'blue' | 'outline-white' | 'outline-black';
	component: 'button';
	_uid: string;
	[k: string]: any;
}

export interface ButtonSimpleStoryblok {
	text?: string;
	link?: Exclude<MultilinkStoryblok, { linktype?: 'email' } | { linktype?: 'asset' }>;
	component: 'buttonSimple';
	_uid: string;
	[k: string]: any;
}

export interface CalloutStoryblok {
	theme?: '' | 'white' | 'black' | 'blue';
	componentHeader?: ComponentHeaderStoryblok[];
	spacingTop?: number | string;
	spacingBottom?: number | string;
	component: 'callout';
	_uid: string;
	[k: string]: any;
}

export interface CardStoryblok {
	image?: AssetStoryblok;
	imageType?: '' | 'icon';
	heading?: string;
	content?: string;
	button?: ButtonSimpleStoryblok[];
	contentPosition?: '' | 'inside' | 'separate';
	component: 'card';
	_uid: string;
	[k: string]: any;
}

export interface CardGridStoryblok {
	gridColumns?: string;
	theme?: '' | 'white' | 'black' | 'blue';
	componentHeader?: ComponentHeaderStoryblok[];
	grid?: CardStoryblok[];
	spacingTop?: number | string;
	spacingBottom?: number | string;
	component: 'cardGrid';
	_uid: string;
	[k: string]: any;
}

export interface CategoryStoryblok {
	title?: string;
	component: 'category';
	_uid: string;
	[k: string]: any;
}

export interface CheckBlockStoryblok {
	heading?: string;
	content?: string;
	component: 'checkBlock';
	_uid: string;
	[k: string]: any;
}

export interface RichtextStoryblok {
	type: string;
	content?: RichtextStoryblok[];
	marks?: RichtextStoryblok[];
	attrs?: any;
	text?: string;
	[k: string]: any;
}

export interface ComponentHeaderStoryblok {
	eyebrow?: string;
	heading?: string;
	content?: RichtextStoryblok;
	buttons?: ButtonStoryblok[];
	component: 'componentHeader';
	_uid: string;
	[k: string]: any;
}

export interface HomepageHeroStoryblok {
	componentHeader?: ComponentHeaderStoryblok[];
	quickLinks?: IconLinkStoryblok[];
	scrollText?: string;
	background?: AssetStoryblok;
	component: 'homepageHero';
	_uid: string;
	[k: string]: any;
}

export interface IconLinkStoryblok {
	icon?: AssetStoryblok;
	text?: string;
	link?: Exclude<MultilinkStoryblok, { linktype?: 'email' } | { linktype?: 'asset' }>;
	component: 'iconLink';
	_uid: string;
	[k: string]: any;
}

export interface InteriorHeroStoryblok {
	componentHeader?: ComponentHeaderStoryblok[];
	background?: AssetStoryblok;
	component: 'interiorHero';
	_uid: string;
	[k: string]: any;
}

export interface LargeTextStoryblok {
	content?: string;
	component: 'largeText';
	_uid: string;
	[k: string]: any;
}

export interface LinkGridStoryblok {
	heading?: string;
	gridColumns?: string;
	grid?: IconLinkStoryblok[];
	spacingTop?: number | string;
	spacingBottom?: number | string;
	component: 'linkGrid';
	_uid: string;
	[k: string]: any;
}

export interface NavButtonStoryblok {
	label?: string;
	link?: Exclude<MultilinkStoryblok, { linktype?: 'email' } | { linktype?: 'asset' }>;
	component: 'navButton';
	_uid: string;
	[k: string]: any;
}

export interface NavItemStoryblok {
	label?: string;
	link?: Exclude<MultilinkStoryblok, { linktype?: 'email' } | { linktype?: 'asset' }>;
	component: 'navItem';
	_uid: string;
	[k: string]: any;
}

export interface PageStoryblok {
	hero?: (
		| HomepageHeroStoryblok
		| InteriorHeroStoryblok
		| PressHeroStoryblok
		| ResourcesHeroStoryblok
	)[];
	body?: (
		| AppScrollerStoryblok
		| CalloutStoryblok
		| CardGridStoryblok
		| LinkGridStoryblok
		| PostCalloutStoryblok
		| PressArchiveStoryblok
		| RichTextStoryblok
		| TeamGridStoryblok
		| TextFeatureStoryblok
	)[];
	seo?: SeoStoryblok[];
	invertHeader?: boolean;
	component: 'page';
	_uid: string;
	[k: string]: any;
}

export interface PostCalloutStoryblok {
	componentHeader?: ComponentHeaderStoryblok[];
	showPressPosts?: boolean;
	resourceType?: ISbStoryData<ResourceTypeStoryblok> | string;
	gridColumns?: string;
	theme?: '' | 'white' | 'starWhite' | 'black' | 'blue';
	spacingTop?: number | string;
	spacingBottom?: number | string;
	component: 'postCallout';
	_uid: string;
	[k: string]: any;
}

export interface PressStoryblok {
	title?: string;
	imageOverride?: AssetStoryblok;
	url: string;
	component: 'press';
	_uid: string;
	[k: string]: any;
}

export interface PressArchiveStoryblok {
	component: 'pressArchive';
	_uid: string;
	[k: string]: any;
}

export interface PressHeroStoryblok {
	heading?: string;
	component: 'pressHero';
	_uid: string;
	[k: string]: any;
}

export interface ResourceStoryblok {
	title?: string;
	date?: string;
	resourceTypes?: (ISbStoryData<ResourceTypeStoryblok> | string)[];
	categories?: (ISbStoryData<CategoryStoryblok> | string)[];
	content?: RichtextStoryblok;
	body?: (
		| AppScrollerStoryblok
		| CalloutStoryblok
		| CardGridStoryblok
		| LinkGridStoryblok
		| PostCalloutStoryblok
		| PressArchiveStoryblok
		| RichTextStoryblok
		| TeamGridStoryblok
		| TextFeatureStoryblok
	)[];
	seo?: SeoStoryblok[];
	featuredImage?: AssetStoryblok;
	component: 'resource';
	_uid: string;
	[k: string]: any;
}

export interface ResourcesHeroStoryblok {
	componentHeader?: ComponentHeaderStoryblok[];
	showFeatured?: boolean;
	component: 'resourcesHero';
	_uid: string;
	[k: string]: any;
}

export interface ResourceTypeStoryblok {
	title?: string;
	icon?: AssetStoryblok;
	component: 'resourceType';
	_uid: string;
	[k: string]: any;
}

export interface RichTextStoryblok {
	content?: RichtextStoryblok;
	spacingTop?: number | string;
	spacingBottom?: number | string;
	component: 'richText';
	_uid: string;
	[k: string]: any;
}

export interface SeoStoryblok {
	title?: string;
	metaDescription?: string;
	image?: AssetStoryblok;
	robotsNoFollow?: boolean;
	robotsNoIndex?: boolean;
	component: 'seo';
	_uid: string;
	[k: string]: any;
}

export interface SingleImageStoryblok {
	image?: AssetStoryblok;
	component: 'singleImage';
	_uid: string;
	[k: string]: any;
}

export interface SiteConfigStoryblok {
	copyrightName?: string;
	x?: string;
	github?: string;
	telegram?: string;
	linkedin?: string;
	youtube?: string;
	tagline?: string;
	legalNavItems?: NavItemStoryblok[];
	navItems?: (NavItemStoryblok | NavButtonStoryblok)[];
	component: 'siteConfig';
	_uid: string;
	[k: string]: any;
}

export interface TableStoryblok {
	content?: string;
	component: 'table';
	_uid: string;
	[k: string]: any;
}

export interface TeamGridStoryblok {
	gridColumns?: string;
	theme?: '' | 'white' | 'black' | 'blue';
	background?: AssetStoryblok;
	spacingTop?: number | string;
	spacingBottom?: number | string;
	componentHeader?: ComponentHeaderStoryblok[];
	grid?: TeamTileStoryblok[];
	component: 'teamGrid';
	_uid: string;
	[k: string]: any;
}

export interface TeamTileStoryblok {
	name?: string;
	headshot?: AssetStoryblok;
	details?: string;
	bio?: string;
	component: 'teamTile';
	_uid: string;
	[k: string]: any;
}

export interface TextFeatureStoryblok {
	heading?: string;
	component: 'textFeature';
	_uid: string;
	[k: string]: any;
}

export interface VideoStoryblok {
	video?: AssetStoryblok;
	component: 'video';
	_uid: string;
	[k: string]: any;
}
